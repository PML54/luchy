/// <cursor>
///
/// üßÆ MOTEUR MATH√âMATIQUE PR√âPA - VERSION UNIFI√âE
///
/// Version simplifi√©e du moteur math√©matique avec liste unifi√©e de formules.
/// Toutes les formules sont regroup√©es dans allFormulas avec m√©tadonn√©es chapitre et level.
///
/// COMPOSANTS PRINCIPAUX:
/// - allFormulas: Liste unifi√©e de toutes les formules
/// - getFormulasByChapter(): Filtrage par chapitre
/// - getFormulasByLevel(): Filtrage par niveau
/// - Fonctions utilitaires pour la gestion des formules
///
/// √âTAT ACTUEL:
/// - Architecture simplifi√©e avec liste unifi√©e
/// - M√©tadonn√©es chapitre et level pour chaque formule
/// - Fonctions de filtrage et statistiques
///
/// HISTORIQUE R√âCENT:
/// - 2025-01-30: Refactorisation vers architecture unifi√©e
/// - Suppression des listes s√©par√©es
/// - Ajout des m√©tadonn√©es chapitre et level
///
/// üîß POINTS D'ATTENTION:
/// - Remplacer l'ancien fichier par celui-ci
/// - Mettre √† jour les imports dans les autres fichiers
/// - Tester la compatibilit√© avec l'existant
///
/// üöÄ PROCHAINES √âTAPES:
/// - Remplacer l'ancien fichier
/// - Mettre √† jour les imports
/// - Tester l'application compl√®te
///
/// üîó FICHIERS LI√âS:
/// - Ancien prepa_math_engine.dart (√† remplacer)
/// - Fichiers utilisant les formules math√©matiques
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (C≈ìur du syst√®me √©ducatif math√©matique)
/// üìÖ Derni√®re modification: 2025-01-30
/// </cursor>

import 'dart:math' as math;

/// =====================================================================================
/// üè∑Ô∏è TYPES DE BASE
/// =====================================================================================

/// Type de param√®tre pour la validation automatique des formules
enum ParameterType {
  /// Entiers relatifs (..., -2, -1, 0, 1, 2, ...)
  INTEGER,

  /// Entiers naturels (0, 1, 2, 3, ...)
  NATURAL,

  /// Nombres positifs stricts (> 0)
  POSITIVE,

  /// Nombres r√©els (-‚àû, +‚àû)
  REAL,
}

/// Type de formule pour le calcul automatique
enum FormulaType {
  /// Coefficients binomiaux C(n,k)
  COMBINAISON,

  /// D√©veloppement du bin√¥me de Newton (a+b)^n
  BINOME,

  /// Formules de sommation Œ£
  SOMME,

  /// Type non identifi√©
  UNKNOWN,
}

/// =====================================================================================
/// üìù CLASSES DE PARAM√àTRES
/// =====================================================================================

/// Param√®tre d'une formule avec validation intelligente
class FormulaParameter {
  /// Nom du param√®tre (ex: 'n', 'k', 'a', 'b')
  final String name;

  /// Description p√©dagogique du param√®tre
  final String description;

  /// Indique si ce param√®tre peut √™tre invers√© avec un autre
  final bool canInvert;

  /// Type du param√®tre pour validation
  final ParameterType type;

  /// Valeur minimale autoris√©e (optionnel)
  final num? minValue;

  /// Valeur maximale autoris√©e (optionnel)
  final num? maxValue;

  const FormulaParameter({
    required this.name,
    required this.description,
    this.canInvert = false,
    this.type = ParameterType.INTEGER,
    this.minValue,
    this.maxValue,
  });

  /// Valide une valeur selon les contraintes du param√®tre
  bool validate(num value) {
    // V√©rification du type
    switch (type) {
      case ParameterType.INTEGER:
        if (value != value.roundToDouble()) return false;
        break;
      case ParameterType.NATURAL:
        if (value != value.roundToDouble() || value < 0) return false;
        break;
      case ParameterType.POSITIVE:
        if (value <= 0) return false;
        break;
      case ParameterType.REAL:
        // Tous les nombres r√©els sont accept√©s
        break;
    }

    // V√©rification des bornes
    if (minValue != null && value < minValue!) return false;
    if (maxValue != null && value > maxValue!) return false;

    return true;
  }

  /// G√©n√®re une valeur al√©atoire valide pour ce param√®tre
  num generateRandomValue() {
    final random = math.Random();
    num min = minValue ?? _getDefaultMin();
    num max = maxValue ?? _getDefaultMax();

    switch (type) {
      case ParameterType.INTEGER:
        return (min + random.nextDouble() * (max - min)).round();
      case ParameterType.NATURAL:
        min = math.max(0, min);
        return (min + random.nextDouble() * (max - min)).round();
      case ParameterType.POSITIVE:
        min = math.max(0.1, min);
        return min + random.nextDouble() * (max - min);
      case ParameterType.REAL:
        return min + random.nextDouble() * (max - min);
    }
  }

  num _getDefaultMin() {
    switch (type) {
      case ParameterType.INTEGER:
        return -10;
      case ParameterType.NATURAL:
        return 0;
      case ParameterType.POSITIVE:
        return 0.1;
      case ParameterType.REAL:
        return -5;
    }
  }

  num _getDefaultMax() {
    switch (type) {
      case ParameterType.INTEGER:
        return 10;
      case ParameterType.NATURAL:
        return 10;
      case ParameterType.POSITIVE:
        return 10;
      case ParameterType.REAL:
        return 5;
    }
  }
}

/// =====================================================================================
/// üßÆ TEMPLATE DE FORMULE AVANC√â
/// =====================================================================================

/// Template de formule math√©matique avec calcul automatique et validation
class EnhancedFormulaTemplate {
  /// üìö CHAPITRE : Cat√©gorie de la formule (binome, combinaisons, sommes)
  final String chapitre;

  /// üéØ LEVEL : Niveau de difficult√© (1-15, 14 pour les formules pr√©pa)
  final int level;

  /// LaTeX original de la formule (immutable)
  final String latexOrigine;

  /// LaTeX avec variables marqu√©es {VAR:nom}
  final String latexVariable;

  /// LaTeX trait√© pour affichage (g√©n√©r√© automatiquement)
  String get latex => _processLatex();

  /// Partie gauche de la formule (g√©n√©r√©e automatiquement)
  String get leftSide => _extractLeftSide();

  /// Partie droite de la formule (g√©n√©r√©e automatiquement)
  String get rightSide => _extractRightSide();

  /// Description p√©dagogique de la formule
  final String description;

  /// Condition LaTeX pour la validit√© de la formule
  final String? conditionLatex;

  /// Param√®tres de la formule avec validation
  final List<FormulaParameter> parameters;

  /// Indique si le r√©sultat est une constante (pas d'inversion de nommage)
  final bool isConstant;

  /// Variables extraites automatiquement
  List<String> get extractedVariables => _extractVariables();

  /// Variables qui peuvent √™tre invers√©es
  List<String> get invertibleVariables => _extractInvertibleVariables();

  /// Nombre de param√®tres
  int get parameterCount => parameters.length;

  /// Noms des variables
  List<String> get variableNames => parameters.map((p) => p.name).toList();

  /// Condition LaTeX finale (alias pour conditionLatex)
  String? get finalConditionLatex => conditionLatex;

  /// Condition LaTeX trait√©e pour affichage (remplace {VAR:variable} par variable)
  String? get displayConditionLatex {
    if (conditionLatex == null) return null;

    String processed = conditionLatex!;
    // Remplacer {VAR:variable} par variable pour l'affichage
    for (final param in parameters) {
      processed = processed.replaceAll('{VAR:${param.name}}', param.name);
    }
    return processed;
  }

  const EnhancedFormulaTemplate({
    required this.chapitre,
    required this.level,
    required this.latexOrigine,
    required this.description,
    required this.parameters,
    this.latexVariable = '',
    this.conditionLatex,
    this.isConstant = false,
  });

  /// Traite le LaTeX en rempla√ßant les variables marqu√©es
  String _processLatex() {
    return latexVariable.isEmpty
        ? latexOrigine
        : latexVariable.replaceAllMapped(
            RegExp(r'\{VAR:([a-zA-Z][a-zA-Z0-9]*)\}'),
            (match) => match.group(1)!,
          );
  }

  /// Extrait la partie gauche de la formule
  String _extractLeftSide() {
    final parts = _processLatex().split(' = ');
    return parts.isNotEmpty ? parts[0] : '';
  }

  /// Extrait la partie droite de la formule
  String _extractRightSide() {
    final parts = _processLatex().split(' = ');
    return parts.length > 1 ? parts[1] : '';
  }

  /// Extrait les variables depuis le LaTeX marqu√©
  List<String> _extractVariables() {
    final regex = RegExp(r'\{VAR:([a-zA-Z][a-zA-Z0-9]*)\}');
    return regex
        .allMatches(latexVariable)
        .map((match) => match.group(1)!)
        .toSet()
        .toList();
  }

  /// Extrait les variables interchangeables
  List<String> _extractInvertibleVariables() {
    // Pas d'inversion pour les constantes
    if (isConstant) return [];

    // Pour l'inversion de nommage, tous les param√®tres peuvent √™tre invers√©s
    return parameters.map((param) => param.name).toList();
  }

  /// Calcule la valeur num√©rique de la formule avec les param√®tres donn√©s
  num? calculate(
    Map<String, num> parameterValues, {
    bool validateParameters = true,
  }) {
    // Validation des param√®tres si demand√©
    if (validateParameters && !_validateParameters(parameterValues)) {
      return null;
    }

    // Calcul selon le type de formule d√©tect√© automatiquement
    return _computeFormula(parameterValues);
  }

  /// Valide tous les param√®tres fournis
  bool _validateParameters(Map<String, num> values) {
    for (final param in parameters) {
      final value = values[param.name];
      if (value == null) return false;
      if (!param.validate(value)) return false;
    }
    return true;
  }

  /// Identifie automatiquement le type de formule d'apr√®s son expression LaTeX
  FormulaType _identifyFormulaType() {
    final latex = _processLatex();
    if (latex.contains(r'\binom')) return FormulaType.COMBINAISON;
    if (latex.contains(r'\sum') && latex.contains('k ='))
      return FormulaType.SOMME;
    if (latex.contains('^n') || latex.contains('^2') || latex.contains('^3')) {
      return FormulaType.BINOME;
    }
    return FormulaType.UNKNOWN;
  }

  /// Calcule la formule selon son type d√©tect√©
  num? _computeFormula(Map<String, num> values) {
    switch (_identifyFormulaType()) {
      case FormulaType.COMBINAISON:
        return _calculateCombinaison(values);
      case FormulaType.BINOME:
        return _calculateBinome(values);
      case FormulaType.SOMME:
        return _calculateSomme(values);
      default:
        return null;
    }
  }

  /// Calcule un coefficient binomial C(n,k) = n! / (k! * (n-k)!)
  num? _calculateCombinaison(Map<String, num> values) {
    final n = values['n']?.round();
    final k = values['k']?.round();

    if (n == null || k == null) return null;
    if (k < 0 || k > n) return null;
    if (n > 12) return null; // Limite pour √©viter d√©bordements

    return _factorial(n) / (_factorial(k) * _factorial(n - k));
  }

  /// Calcule le d√©veloppement du bin√¥me (a+b)^n
  num? _calculateBinome(Map<String, num> values) {
    final a = values['a'];
    final b = values['b'];
    final n = values['n']?.round();

    if (a == null || b == null || n == null) return null;
    if (n < 0 || n > 5) return null; // Limite pour √©viter calculs trop lourds

    num result = 0;
    for (int k = 0; k <= n; k++) {
      final coeff = _factorial(n) / (_factorial(k) * _factorial(n - k));
      result += coeff * math.pow(a, n - k) * math.pow(b, k);
    }
    return result;
  }

  /// Calcule une somme selon le type d√©tect√©
  num? _calculateSomme(Map<String, num> values) {
    final n = values['n']?.round();
    if (n == null || n < 0) return null;

    final latex = _processLatex();

    // Somme des premiers entiers: Œ£(k=1 to n) k = n(n+1)/2
    if (latex.contains(r'\sum_{k=1}^{n} k')) {
      return n * (n + 1) / 2;
    }

    // Somme des carr√©s: Œ£(k=1 to n) k¬≤ = n(n+1)(2n+1)/6
    if (latex.contains(r'\sum_{k=1}^{n} k^2')) {
      return n * (n + 1) * (2 * n + 1) / 6;
    }

    // Somme des cubes: Œ£(k=1 to n) k¬≥ = (n(n+1)/2)¬≤
    if (latex.contains(r'\sum_{k=1}^{n} k^3')) {
      final sum = n * (n + 1) / 2;
      return sum * sum;
    }

    return null;
  }

  /// Calcule la factorielle n!
  num _factorial(int n) {
    if (n < 0) return 0;
    if (n == 0 || n == 1) return 1;

    num result = 1;
    for (int i = 2; i <= n; i++) {
      result *= i;
    }
    return result;
  }

  /// G√©n√®re des exemples valides pour cette formule
  List<Map<String, num>> generateValidExamples({int count = 5}) {
    final examples = <Map<String, num>>[];
    final random = math.Random();

    for (int i = 0; i < count * 3; i++) {
      // Essayer plus pour avoir assez de valides
      final example = <String, num>{};
      bool isValid = true;

      for (final param in parameters) {
        final value = param.generateRandomValue();
        if (!param.validate(value)) {
          isValid = false;
          break;
        }
        example[param.name] = value;
      }

      if (isValid && !_isDuplicateExample(examples, example)) {
        examples.add(example);
        if (examples.length >= count) break;
      }
    }

    return examples;
  }

  /// V√©rifie si un exemple est d√©j√† pr√©sent
  bool _isDuplicateExample(
      List<Map<String, num>> examples, Map<String, num> example) {
    for (final existing in examples) {
      bool isDuplicate = true;
      for (final entry in example.entries) {
        if (existing[entry.key] != entry.value) {
          isDuplicate = false;
          break;
        }
      }
      if (isDuplicate) return true;
    }
    return false;
  }

  // =====================================================================================
  /// üîÑ SYST√àME D'INVERSION DE VARIABLES
  // =====================================================================================

  /// V√©rifie si deux variables peuvent √™tre invers√©es (inversion de nommage)
  bool canInvertVariables(String var1, String var2) {
    // Pas d'inversion pour les constantes
    if (isConstant) return false;

    final param1 = parameters.firstWhere(
      (p) => p.name == var1,
      orElse: () => throw ArgumentError('Variable $var1 non trouv√©e'),
    );
    final param2 = parameters.firstWhere(
      (p) => p.name == var2,
      orElse: () => throw ArgumentError('Variable $var2 non trouv√©e'),
    );

    // Pour l'inversion de nommage, on peut inverser n'importe quels 2 param√®tres
    // tant qu'ils sont diff√©rents
    return var1 != var2;
  }

  /// Cr√©e une version invers√©e de la formule en √©changeant deux variables
  EnhancedFormulaTemplate createInvertedVersion(String var1, String var2) {
    if (!canInvertVariables(var1, var2)) {
      throw ArgumentError(
          'Les variables $var1 et $var2 ne peuvent pas √™tre invers√©es');
    }

    // Inverser le LaTeX avec variables marqu√©es
    String invertedLatexVariable = latexVariable;
    invertedLatexVariable =
        invertedLatexVariable.replaceAll('{VAR:$var1}', 'TEMP_VAR1');
    invertedLatexVariable =
        invertedLatexVariable.replaceAll('{VAR:$var2}', '{VAR:$var1}');
    invertedLatexVariable =
        invertedLatexVariable.replaceAll('TEMP_VAR1', '{VAR:$var2}');

    // Inverser le LaTeX original
    String invertedLatexOrigine = latexOrigine;
    // Utiliser des patterns plus sp√©cifiques pour √©viter les conflits
    final var1Pattern = RegExp(r'\b' + RegExp.escape(var1) + r'\b');
    final var2Pattern = RegExp(r'\b' + RegExp.escape(var2) + r'\b');

    invertedLatexOrigine =
        invertedLatexOrigine.replaceAll(var1Pattern, 'TEMP_VAR1');
    invertedLatexOrigine = invertedLatexOrigine.replaceAll(var2Pattern, var1);
    invertedLatexOrigine = invertedLatexOrigine.replaceAll('TEMP_VAR1', var2);

    // Inverser les conditions LaTeX si elles existent
    String? invertedConditionLatex = conditionLatex;
    if (invertedConditionLatex != null) {
      invertedConditionLatex =
          invertedConditionLatex.replaceAll('{VAR:$var1}', 'TEMP_VAR1');
      invertedConditionLatex =
          invertedConditionLatex.replaceAll('{VAR:$var2}', '{VAR:$var1}');
      invertedConditionLatex =
          invertedConditionLatex.replaceAll('TEMP_VAR1', '{VAR:$var2}');
    }

    // Cr√©er les nouveaux param√®tres avec les variables invers√©es
    final invertedParameters = parameters.map((param) {
      if (param.name == var1) {
        return FormulaParameter(
          name: var2,
          description: param.description.replaceAll(var1, var2),
          canInvert: param.canInvert,
          type: param.type,
          minValue: param.minValue,
          maxValue: param.maxValue,
        );
      } else if (param.name == var2) {
        return FormulaParameter(
          name: var1,
          description: param.description.replaceAll(var2, var1),
          canInvert: param.canInvert,
          type: param.type,
          minValue: param.minValue,
          maxValue: param.maxValue,
        );
      }
      return param;
    }).toList();

    return EnhancedFormulaTemplate(
      chapitre: chapitre,
      level: level,
      latexOrigine: invertedLatexOrigine,
      latexVariable: invertedLatexVariable,
      description: '${description} (invers√©: $var1 ‚Üî $var2)',
      conditionLatex: invertedConditionLatex,
      parameters: invertedParameters,
    );
  }

  /// G√©n√®re toutes les variantes possibles avec inversions
  List<EnhancedFormulaTemplate> generateInvertedVariants() {
    final variants = <EnhancedFormulaTemplate>[];
    final invertibleVars = invertibleVariables;

    // Ajouter la formule originale
    variants.add(this);

    // G√©n√©rer toutes les combinaisons d'inversions possibles
    for (int i = 0; i < invertibleVars.length; i++) {
      for (int j = i + 1; j < invertibleVars.length; j++) {
        try {
          final variant =
              createInvertedVersion(invertibleVars[i], invertibleVars[j]);
          variants.add(variant);
        } catch (e) {
          // Ignorer les inversions impossibles
          continue;
        }
      }
    }

    return variants;
  }

  /// G√©n√®re une variante al√©atoire avec inversion
  EnhancedFormulaTemplate? generateRandomInvertedVariant() {
    final invertibleVars = invertibleVariables;
    if (invertibleVars.length < 2) return null;

    final random = math.Random();

    // S'assurer que var1 et var2 sont diff√©rentes
    String var1, var2;
    do {
      var1 = invertibleVars[random.nextInt(invertibleVars.length)];
      var2 = invertibleVars[random.nextInt(invertibleVars.length)];
    } while (var1 == var2 && invertibleVars.length > 1);

    if (var1 == var2) return null;

    try {
      return createInvertedVersion(var1, var2);
    } catch (e) {
      print('‚ùå Erreur lors de l\'inversion de $var1 et $var2: $e');
      return null;
    }
  }

  /// V√©rifie si cette formule est une inversion d'une autre
  bool isInversionOf(EnhancedFormulaTemplate other) {
    // Comparer les variables interchangeables
    final myInvertible = invertibleVariables.toSet();
    final otherInvertible = other.invertibleVariables.toSet();

    if (myInvertible.length != otherInvertible.length) return false;
    if (!myInvertible.containsAll(otherInvertible)) return false;

    // V√©rifier que les formules sont diff√©rentes mais similaires
    return latexOrigine != other.latexOrigine &&
        chapitre == other.chapitre &&
        level == other.level;
  }
}

/// =====================================================================================
/// üîÑ G√âN√âRATEUR DE QUIZ AVEC INVERSIONS
/// =====================================================================================

/// G√©n√®re un quiz avec des formules et leurs inversions pour perturber l'utilisateur
class InvertedQuizGenerator {
  /// G√©n√®re un quiz avec 50% de formules normales et 50% d'inversions
  static InvertedQuizConfiguration generateInvertedQuiz({
    String chapitre = 'binome',
    int level = 14,
    int nombreQuestions = 12,
    double inversionRatio = 0.5, // 50% d'inversions
  }) {
    final baseFormulas = allFormulas
        .where((f) => f.chapitre == chapitre && f.level == level)
        .toList();

    if (baseFormulas.isEmpty) {
      throw ArgumentError(
          'Aucune formule trouv√©e pour chapitre: $chapitre, level: $level');
    }

    final selectedFormulas = <EnhancedFormulaTemplate>[];
    final random = math.Random();

    // S√©lectionner des formules de base
    final numberOfInversions = (nombreQuestions * inversionRatio).round();
    final numberOfNormal = nombreQuestions - numberOfInversions;

    // Ajouter des formules normales
    for (int i = 0; i < numberOfNormal && i < baseFormulas.length; i++) {
      selectedFormulas.add(baseFormulas[i]);
    }

    // Ajouter des inversions
    final formulasWithInversions =
        baseFormulas.where((f) => f.invertibleVariables.length >= 2).toList();

    for (int i = 0;
        i < numberOfInversions && i < formulasWithInversions.length;
        i++) {
      final formula = formulasWithInversions[i];
      final invertedVariant = formula.generateRandomInvertedVariant();
      if (invertedVariant != null) {
        selectedFormulas.add(invertedVariant);
      }
    }

    // M√©langer les formules pour perturber l'utilisateur
    selectedFormulas.shuffle(random);

    return InvertedQuizConfiguration(
      formules: selectedFormulas,
      chapitre: chapitre,
      level: level,
      nombreQuestions: selectedFormulas.length,
      hasInversions: true,
      inversionRatio: inversionRatio,
    );
  }

  /// G√©n√®re un quiz progressif : commence facile, puis ajoute des inversions
  static InvertedQuizConfiguration generateProgressiveQuiz({
    String chapitre = 'binome',
    int level = 14,
    int nombreQuestions = 12,
  }) {
    final baseFormulas = allFormulas
        .where((f) => f.chapitre == chapitre && f.level == level)
        .toList();

    if (baseFormulas.isEmpty) {
      throw ArgumentError(
          'Aucune formule trouv√©e pour chapitre: $chapitre, level: $level');
    }

    final selectedFormulas = <EnhancedFormulaTemplate>[];
    final random = math.Random();

    // Premi√®re moiti√© : formules normales
    final firstHalf = (nombreQuestions / 2).round();
    for (int i = 0; i < firstHalf && i < baseFormulas.length; i++) {
      selectedFormulas.add(baseFormulas[i]);
    }

    // Deuxi√®me moiti√© : m√©lange de normales et d'inversions
    final secondHalf = nombreQuestions - firstHalf;
    final formulasWithInversions =
        baseFormulas.where((f) => f.invertibleVariables.length >= 2).toList();

    for (int i = 0; i < secondHalf; i++) {
      if (i < formulasWithInversions.length && random.nextBool()) {
        // Ajouter une inversion
        final formula = formulasWithInversions[i];
        final invertedVariant = formula.generateRandomInvertedVariant();
        if (invertedVariant != null) {
          selectedFormulas.add(invertedVariant);
        } else {
          selectedFormulas.add(formula);
        }
      } else {
        // Ajouter une formule normale
        final formulaIndex = (firstHalf + i) % baseFormulas.length;
        selectedFormulas.add(baseFormulas[formulaIndex]);
      }
    }

    // M√©langer pour plus de perturbation
    selectedFormulas.shuffle(random);

    return InvertedQuizConfiguration(
      formules: selectedFormulas,
      chapitre: chapitre,
      level: level,
      nombreQuestions: selectedFormulas.length,
      hasInversions: true,
      inversionRatio: 0.3, // 30% d'inversions en moyenne
    );
  }
}

/// Configuration √©tendue pour les quiz avec inversions
class InvertedQuizConfiguration {
  final List<EnhancedFormulaTemplate> formules;
  final String chapitre;
  final int level;
  final int nombreQuestions;
  final bool hasInversions;
  final double inversionRatio;

  const InvertedQuizConfiguration({
    required this.formules,
    required this.chapitre,
    required this.level,
    required this.nombreQuestions,
    this.hasInversions = false,
    this.inversionRatio = 0.0,
  });
}

/// =====================================================================================
/// üìö LISTE UNIFI√âE DE TOUTES LES FORMULES
/// =====================================================================================

/// Liste unifi√©e regroupant toutes les formules math√©matiques de pr√©pa
/// avec m√©tadonn√©es chapitre et level pour faciliter la gestion
final List<EnhancedFormulaTemplate> allFormulas = [
  // ===== FORMULES BIN√îME =====
  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'(a+b)^{n} = \sum_{k=0}^{n} \binom{n}{k} a^{n-k} b^{k}',
    latexVariable:
        r'({VAR:a}+{VAR:b})^{{VAR:n}} = \sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} {VAR:a}^{{VAR:n}-{VAR:k}} {VAR:b}^{{VAR:k}}',
    description: 'd√©veloppement g√©n√©ral du bin√¥me de Newton',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    parameters: const [
      FormulaParameter(
        name: 'a',
        description: 'premi√®re variable (interchangeable avec b)',
        canInvert: true,
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'b',
        description: 'seconde variable (interchangeable avec a)',
        canInvert: true,
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'n',
        description: 'exposant entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 5,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 5,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'\binom{n}{k} = \frac{n!}{k!(n-k)!}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \frac{{VAR:n}!}{{VAR:k}!({VAR:n}-{VAR:k})!}',
    description: 'coefficient binomial de base',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:k} \in \mathbb{N}, {VAR:k} \leq {VAR:n}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'ensemble total (interchangeable avec k)',
        canInvert: true,
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'sous-ensemble choisi (interchangeable avec n)',
        canInvert: true,
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'(1+a)^{n} = \sum_{k=0}^{n} \binom{n}{k} a^{k}',
    latexVariable:
        r'(1+{VAR:a})^{{VAR:n}} = \sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} {VAR:a}^{{VAR:k}}',
    description: 'd√©veloppement binomial sp√©cial',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:a} \in \mathbb{R}',
    parameters: const [
      FormulaParameter(
        name: 'a',
        description: 'variable r√©elle (interchangeable avec 1)',
        canInvert: true,
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'n',
        description: 'exposant entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 5,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 5,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k} = 0',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} (-1)^{VAR:k} \binom{{VAR:n}}{{VAR:k}} = 0',
    description: 'somme altern√©e des coefficients binomiaux',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    isConstant: true, // R√©sultat = 0 (constante)
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'exposant (doit √™tre ‚â• 1)',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'\sum_{k=r}^{n} \binom{k}{r} = \binom{n+1}{r+1}',
    latexVariable:
        r'\sum_{{VAR:k}={VAR:r}}^{{VAR:n}} \binom{{VAR:k}}{{VAR:r}} = \binom{{VAR:n}+1}{{VAR:r}+1}',
    description: 'identit√© de hockey-stick',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:r} \in \mathbb{N}, {VAR:n} \geq {VAR:r}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier sup√©rieur',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'r',
        description: 'entier inf√©rieur',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'\binom{n}{0} = 1',
    latexVariable: r'\binom{{VAR:n}}{0} = 1',
    description: 'coefficient binomial pour k=0',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    isConstant: true, // R√©sultat = 1 (constante)
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier quelconque',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'\binom{n}{n} = 1',
    latexVariable: r'\binom{{VAR:n}}{{VAR:n}} = 1',
    description: 'coefficient binomial pour k=n',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    isConstant: true, // R√©sultat = 1 (constante)
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier quelconque',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'\binom{n}{k} = \binom{n-1}{k} + \binom{n-1}{k-1}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \binom{{VAR:n}-1}{{VAR:k}} + \binom{{VAR:n}-1}{{VAR:k}-1}',
    description: 'relation de r√©currence de Pascal',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:k} \in \mathbb{N}, {VAR:n} \geq 1, 1 \leq {VAR:k} \leq {VAR:n}-1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier sup√©rieur √† 1',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'entier entre 1 et n-1',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} \binom{n}{k} = 2^{n}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} = 2^{{VAR:n}}',
    description: 'formule du bin√¥me pour (1+1)^n',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 8,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 8,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'binome',
    level: 14,
    latexOrigine: r'\binom{n}{k} = \binom{n}{n-k}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \binom{{VAR:n}}{{VAR:n}-{VAR:k}}',
    description: 'propri√©t√© de sym√©trie des coefficients binomiaux',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:k} \in \mathbb{N}, {VAR:k} \leq {VAR:n}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille totale de l\'ensemble',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice (interchangeable avec n-k)',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  // ===== FORMULES COMBINAISONS =====
  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\binom{n}{k} = \frac{n!}{k!(n-k)!}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \frac{{VAR:n}!}{{VAR:k}!({VAR:n}-{VAR:k})!}',
    description: 'd√©finition de base des combinaisons',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:k} \in \mathbb{N}, {VAR:k} \leq {VAR:n}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre total d\'√©l√©ments',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'nombre d\'√©l√©ments √† choisir',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\binom{n}{k} = \binom{n}{n-k}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \binom{{VAR:n}}{{VAR:n}-{VAR:k}}',
    description: 'sym√©trie des coefficients binomiaux',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:k} \in \mathbb{N}, {VAR:k} \leq {VAR:n}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille totale',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice (interchangeable avec n-k)',
        canInvert: true,
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\binom{n}{k} = \binom{n-1}{k} + \binom{n-1}{k-1}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \binom{{VAR:n}-1}{{VAR:k}} + \binom{{VAR:n}-1}{{VAR:k}-1}',
    description: 'relation de r√©currence du triangle de Pascal',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:k} \in \mathbb{N}, {VAR:n} \geq 1, 1 \leq {VAR:k} \leq {VAR:n}-1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier sup√©rieur √† 1',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'entier entre 1 et n-1',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\binom{n}{0} = 1',
    latexVariable: r'\binom{{VAR:n}}{0} = 1',
    description: 'coefficient binomial pour k=0',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    isConstant: true, // R√©sultat = 1 (constante)
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier quelconque',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\binom{n}{n} = 1',
    latexVariable: r'\binom{{VAR:n}}{{VAR:n}} = 1',
    description: 'coefficient binomial pour k=n',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    isConstant: true, // R√©sultat = 1 (constante)
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier quelconque',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} \binom{n}{k} = 2^{n}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} = 2^{{VAR:n}}',
    description: 'somme de tous les coefficients binomiaux',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k} = 0',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} (-1)^{VAR:k} \binom{{VAR:n}}{{VAR:k}} = 0',
    description: 'somme altern√©e des coefficients binomiaux',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    isConstant: true, // R√©sultat = 0 (constante)
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier sup√©rieur √† 0',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} k \binom{n}{k} = n \cdot 2^{n-1}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} {VAR:k} \binom{{VAR:n}}{{VAR:k}} = {VAR:n} \cdot 2^{{VAR:n}-1}',
    description: 'somme pond√©r√©e des coefficients binomiaux',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier sup√©rieur √† 0',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} k^2 \binom{n}{k} = n(n+1) \cdot 2^{n-2}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} {VAR:k}^2 \binom{{VAR:n}}{{VAR:k}} = {VAR:n}({VAR:n}+1) \cdot 2^{{VAR:n}-2}',
    description: 'somme des carr√©s pond√©r√©s des coefficients binomiaux',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier sup√©rieur √† 1',
        type: ParameterType.NATURAL,
        minValue: 2,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} \binom{n}{k}^2 = \binom{2n}{n}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}}^2 = \binom{2{VAR:n}}{{VAR:n}}',
    description: 'identit√© de Vandermonde',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 8,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 8,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'combinaisons',
    level: 14,
    latexOrigine: r'\sum_{k=r}^{n} \binom{k}{r} = \binom{n+1}{r+1}',
    latexVariable:
        r'\sum_{{VAR:k}={VAR:r}}^{{VAR:n}} \binom{{VAR:k}}{{VAR:r}} = \binom{{VAR:n}+1}{{VAR:r}+1}',
    description: 'identit√© de hockey-stick',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:r} \in \mathbb{N}, {VAR:n} \geq {VAR:r}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier sup√©rieur',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'r',
        description: 'entier inf√©rieur',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=1}^{n} k^3 = \left(\frac{n(n+1)}{2}\right)^2',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} {VAR:k}^3 = \left(\frac{{VAR:n}({VAR:n}+1)}{2}\right)^2',
    description: 'somme des cubes des premiers entiers',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre d\'entiers √† sommer',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 20,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 20,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} q^k = \frac{1-q^{n+1}}{1-q}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} {VAR:q}^{VAR:k} = \frac{1-{VAR:q}^{{VAR:n}+1}}{1-{VAR:q}}',
    description: 's√©rie g√©om√©trique finie',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:q} \in \mathbb{R}, {VAR:q} \neq 1',
    parameters: const [
      FormulaParameter(
        name: 'q',
        description: 'raison de la suite (q ‚â† 1)',
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'n',
        description: 'nombre de termes',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 20,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 20,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine:
        r'\sum_{k=0}^{n} k q^k = \frac{q(1-(n+1)q^n + n q^{n+1})}{(1-q)^2}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} {VAR:k} {VAR:q}^{VAR:k} = \frac{{VAR:q}(1-({VAR:n}+1){VAR:q}^{VAR:n} + {VAR:n} {VAR:q}^{{VAR:n}+1})}{(1-{VAR:q})^2}',
    description: 's√©rie arithm√©tico-g√©om√©trique',
    conditionLatex:
        r'{VAR:n} \in \mathbb{N}, {VAR:q} \in \mathbb{R}, {VAR:q} \neq 1',
    parameters: const [
      FormulaParameter(
        name: 'q',
        description: 'raison de la suite (q ‚â† 1)',
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'n',
        description: 'nombre de termes',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 15,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 15,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=1}^{n} k^4 = \frac{n(n+1)(2n+1)(3n^2+3n-1)}{30}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} {VAR:k}^4 = \frac{{VAR:n}({VAR:n}+1)(2{VAR:n}+1)(3{VAR:n}^2+3{VAR:n}-1)}{30}',
    description: 'somme des puissances quatri√®mes',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre d\'entiers √† sommer',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=1}^{n} \frac{1}{k(k+1)} = 1 - \frac{1}{n+1}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} \frac{1}{{VAR:k}({VAR:k}+1)} = 1 - \frac{1}{{VAR:n}+1}',
    description: 'somme t√©lescopique',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre de termes',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 50,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 50,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=1}^{n} k(k+1) = \frac{n(n+1)(n+2)}{3}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} {VAR:k}({VAR:k}+1) = \frac{{VAR:n}({VAR:n}+1)({VAR:n}+2)}{3}',
    description: 'somme des produits cons√©cutifs',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre de termes',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 20,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 20,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine:
        r'\sum_{k=1}^{n} \frac{1}{k^2} = \frac{\pi^2}{6} - \sum_{k=n+1}^{\infty} \frac{1}{k^2}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} \frac{1}{{VAR:k}^2} = \frac{\pi^2}{6} - \sum_{{VAR:k}={VAR:n}+1}^{\infty} \frac{1}{{VAR:k}^2}',
    description: 'somme partielle des inverses des carr√©s',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre de termes',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 100,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 100,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} \binom{n}{k} = 2^n',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} = 2^{{VAR:n}}',
    description: 'somme des coefficients binomiaux',
    conditionLatex: r'{VAR:n} \in \mathbb{N}',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 15,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 15,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k} = 0',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} (-1)^{VAR:k} \binom{{VAR:n}}{{VAR:k}} = 0',
    description: 'somme altern√©e des coefficients binomiaux',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    isConstant: true, // R√©sultat = 0 (constante)
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'entier sup√©rieur √† 0',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 15,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 15,
      ),
    ],
  ),

  // ===== FORMULES SOMMES =====
  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=1}^{n} k = \frac{n(n+1)}{2}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} {VAR:k} = \frac{{VAR:n}({VAR:n}+1)}{2}',
    description: 'somme des premiers entiers',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre d\'entiers √† sommer',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 100,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 100,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    chapitre: 'sommes',
    level: 14,
    latexOrigine: r'\sum_{k=1}^{n} k^2 = \frac{n(n+1)(2n+1)}{6}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} {VAR:k}^2 = \frac{{VAR:n}({VAR:n}+1)(2{VAR:n}+1)}{6}',
    description: 'somme des carr√©s des premiers entiers',
    conditionLatex: r'{VAR:n} \in \mathbb{N}, {VAR:n} \geq 1',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre d\'entiers √† sommer',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 50,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de sommation',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 50,
      ),
    ],
  ),
];

/// =====================================================================================
/// üîß FONCTIONS UTILITAIRES POUR LA LISTE UNIFI√âE
/// =====================================================================================

/// Filtre les formules par chapitre
List<EnhancedFormulaTemplate> getFormulasByChapter(String chapitre) {
  return allFormulas.where((formula) => formula.chapitre == chapitre).toList();
}

/// Filtre les formules par niveau
List<EnhancedFormulaTemplate> getFormulasByLevel(int level) {
  return allFormulas.where((formula) => formula.level == level).toList();
}

/// Filtre les formules par chapitre et niveau
List<EnhancedFormulaTemplate> getFormulasByChapterAndLevel(
    String chapitre, int level) {
  return allFormulas
      .where(
          (formula) => formula.chapitre == chapitre && formula.level == level)
      .toList();
}

/// Obtient tous les chapitres disponibles
List<String> getAvailableChapters() {
  return allFormulas.map((formula) => formula.chapitre).toSet().toList();
}

/// Obtient tous les niveaux disponibles
List<int> getAvailableLevels() {
  return allFormulas.map((formula) => formula.level).toSet().toList()..sort();
}

/// Compte le nombre de formules par chapitre
Map<String, int> getFormulaCountByChapter() {
  final Map<String, int> counts = {};
  for (final formula in allFormulas) {
    counts[formula.chapitre] = (counts[formula.chapitre] ?? 0) + 1;
  }
  return counts;
}

/// Compte le nombre de formules par niveau
Map<int, int> getFormulaCountByLevel() {
  final Map<int, int> counts = {};
  for (final formula in allFormulas) {
    counts[formula.level] = (counts[formula.level] ?? 0) + 1;
  }
  return counts;
}

/// =====================================================================================
/// üéÆ TYPES DE JEUX ET NIVEAUX √âDUCATIFS
/// =====================================================================================

/// Niveaux √©ducatifs disponibles dans l'application
enum NiveauEducatif {
  primaire('Primaire', 'Niveau primaire'),
  college('Coll√®ge', 'Niveau coll√®ge'),
  lycee('Lyc√©e', 'Niveau lyc√©e'),
  prepa('Pr√©pa', 'Niveau pr√©pa'),
  superieur('Sup√©rieur', 'Niveau sup√©rieur');

  const NiveauEducatif(this.nom, this.description);
  final String nom;
  final String description;
}

/// Cat√©gories de mati√®res √©ducatives
enum CategorieMatiere {
  mathematiques('Math√©matiques', 'Sciences math√©matiques'),
  francais('Fran√ßais', 'Litt√©rature et langue fran√ßaise'),
  histoire('Histoire', 'Histoire et g√©ographie'),
  sciences('Sciences', 'Sciences naturelles et physiques'),
  langues('Langues', 'Langues √©trang√®res'),
  economie('√âconomie', 'Sciences √©conomiques'),
  anglais('Anglais', 'Langue anglaise');

  const CategorieMatiere(this.nom, this.description);
  final String nom;
  final String description;
}

/// Types de jeux disponibles dans l'application
enum TypeDeJeu {
  correspondanceVisAVis('Correspondance vis-√†-vis', 'Jeu de correspondance'),
  ordreChronologique('Ordre chronologique', 'Jeu de s√©quence temporelle'),
  combinaisonsMatematiques('Combinaisons math√©matiques', 'Jeu de combinaisons'),
  formulairesLatex('Formulaires LaTeX', 'Jeu de formules math√©matiques'),
  figuresDeStyle('Figures de Style', 'Jeu de litt√©rature');

  const TypeDeJeu(this.nom, this.description);
  final String nom;
  final String description;
}

/// =====================================================================================
/// üìã PR√âS√âLECTIONS DE QUESTIONNAIRES
/// =====================================================================================

/// Configuration pr√©d√©finie pour un questionnaire
class QuestionnairePreset {
  final String id;
  final String nom;
  final String description;
  final String titre;
  final String sousTheme;
  final TypeDeJeu typeDeJeu;
  final NiveauEducatif niveau;
  final CategorieMatiere categorie;
  final int nombreQuestions;
  final Duration dureeLimite;
  final List<String> colonneGauche;
  final List<String> colonneDroite;
  final double ratioLargeurColonnes;

  const QuestionnairePreset({
    required this.id,
    required this.nom,
    required this.description,
    required this.titre,
    required this.sousTheme,
    required this.typeDeJeu,
    required this.niveau,
    required this.categorie,
    this.nombreQuestions = 10,
    this.dureeLimite = const Duration(minutes: 30),
    this.colonneGauche = const [],
    this.colonneDroite = const [],
    this.ratioLargeurColonnes = 1.0,
  });

  /// Convertit en EducationalPreset
  EducationalPreset toEducationalPreset() {
    return EducationalPreset(
      id: id,
      nom: nom,
      description: description,
      niveau: niveau,
      categorie: categorie,
      typeDeJeu: typeDeJeu,
      tags: [sousTheme],
    );
  }
}

/// Configuration pr√©d√©finie pour un contenu √©ducatif
class EducationalPreset {
  final String id;
  final String nom;
  final String description;
  final NiveauEducatif niveau;
  final CategorieMatiere categorie;
  final TypeDeJeu typeDeJeu;
  final List<String> tags;
  final List<String> leftColumn;
  final List<String> rightColumn;

  const EducationalPreset({
    required this.id,
    required this.nom,
    required this.description,
    required this.niveau,
    required this.categorie,
    required this.typeDeJeu,
    this.tags = const [],
    this.leftColumn = const [],
    this.rightColumn = const [],
  });
}

/// =====================================================================================
/// üßÆ GESTIONNAIRE DE FORMULES MATH√âMATIQUES PR√âPA
/// =====================================================================================

/// Gestionnaire principal pour les formules math√©matiques de pr√©pa
class PrepaMathFormulaManager {
  /// Obtient toutes les formules disponibles
  List<EnhancedFormulaTemplate> getAllFormulas() => allFormulas;

  /// Obtient les formules par chapitre
  List<EnhancedFormulaTemplate> getFormulasByChapter(String chapitre) {
    return allFormulas
        .where((formula) => formula.chapitre == chapitre)
        .toList();
  }

  /// Obtient les formules par niveau
  List<EnhancedFormulaTemplate> getFormulasByLevel(int level) {
    return allFormulas.where((formula) => formula.level == level).toList();
  }

  /// Obtient les formules par chapitre et niveau
  List<EnhancedFormulaTemplate> getFormulasByChapterAndLevel(
      String chapitre, int level) {
    return allFormulas
        .where(
            (formula) => formula.chapitre == chapitre && formula.level == level)
        .toList();
  }

  /// Obtient tous les chapitres disponibles
  List<String> getAvailableChapters() {
    return allFormulas.map((formula) => formula.chapitre).toSet().toList();
  }

  /// Obtient tous les niveaux disponibles
  List<int> getAvailableLevels() {
    return allFormulas.map((formula) => formula.level).toSet().toList()..sort();
  }

  /// Compte le nombre de formules par chapitre
  Map<String, int> getFormulaCountByChapter() {
    final Map<String, int> counts = {};
    for (final formula in allFormulas) {
      counts[formula.chapitre] = (counts[formula.chapitre] ?? 0) + 1;
    }
    return counts;
  }

  /// Compte le nombre de formules par niveau
  Map<int, int> getFormulaCountByLevel() {
    final Map<int, int> counts = {};
    for (final formula in allFormulas) {
      counts[formula.level] = (counts[formula.level] ?? 0) + 1;
    }
    return counts;
  }

  /// Alias pour la compatibilit√© avec l'ancien code
  List<EnhancedFormulaTemplate> get binomeFormulas =>
      getFormulasByChapter('binome');
  List<EnhancedFormulaTemplate> get combinaisonsFormulas =>
      getFormulasByChapter('combinaisons');
  List<EnhancedFormulaTemplate> get sommesFormulas =>
      getFormulasByChapter('sommes');

  /// Cr√©e un preset unifi√© pour les calculs pr√©pa
  EducationalPreset createUnifiedPrepaCalculPreset() {
    return EducationalPreset(
      id: 'unified_prepa_calcul',
      nom: 'Calculs Pr√©pa Unifi√©s',
      description: 'Formules math√©matiques unifi√©es pour la pr√©pa',
      niveau: NiveauEducatif.prepa,
      categorie: CategorieMatiere.mathematiques,
      typeDeJeu: TypeDeJeu.formulairesLatex,
      tags: ['calcul', 'pr√©pa', 'unifi√©'],
    );
  }
}

/// =====================================================================================
/// üéØ G√âN√âRATEUR DE QUIZ
/// =====================================================================================

/// Configuration simple pour un quiz (compatibilit√©)
class QuizConfiguration {
  final List<EnhancedFormulaTemplate> formules;
  final int nombreQuestions;
  final Duration dureeLimite;
  final bool melangeQuestions;
  final bool afficheCorrections;

  const QuizConfiguration({
    required this.formules,
    this.nombreQuestions = 10,
    this.dureeLimite = const Duration(minutes: 30),
    this.melangeQuestions = true,
    this.afficheCorrections = true,
  });
}

/// Mode de quiz
enum QuizMode {
  entrainement('Entra√Ænement', 'Mode d\'entra√Ænement libre'),
  evaluation('√âvaluation', 'Mode d\'√©valuation chronom√©tr√©e'),
  examen('Examen', 'Mode d\'examen formel'),
  mixte('Mixte', 'Mode mixte avec diff√©rents types de questions');

  const QuizMode(this.nom, this.description);
  final String nom;
  final String description;
}

/// G√©n√©rateur de quiz math√©matiques
class QuizGenerator {
  final PrepaMathFormulaManager formulaManager;

  const QuizGenerator({required this.formulaManager});

  /// G√©n√®re un quiz bas√© sur la configuration
  QuizConfiguration generateQuiz({
    String? chapitre,
    int? level,
    int nombreQuestions = 10,
    Duration dureeLimite = const Duration(minutes: 30),
  }) {
    List<EnhancedFormulaTemplate> formules;

    if (chapitre != null && level != null) {
      formules = formulaManager.getFormulasByChapterAndLevel(chapitre, level);
    } else if (chapitre != null) {
      formules = formulaManager.getFormulasByChapter(chapitre);
    } else if (level != null) {
      formules = formulaManager.getFormulasByLevel(level);
    } else {
      formules = formulaManager.getAllFormulas();
    }

    return QuizConfiguration(
      formules: formules,
      nombreQuestions: nombreQuestions,
      dureeLimite: dureeLimite,
    );
  }
}

/// =====================================================================================
/// üîÑ COMPATIBILIT√â AVEC L'ANCIEN SYST√àME
/// =====================================================================================

/// Alias pour la compatibilit√© avec l'ancien code
final List<EnhancedFormulaTemplate> enhancedBinomeTemplates =
    getFormulasByChapter('binome');
final List<EnhancedFormulaTemplate> enhancedCombinaisonsTemplates =
    getFormulasByChapter('combinaisons');
final List<EnhancedFormulaTemplate> enhancedSommesTemplates =
    getFormulasByChapter('sommes');

/// Instance globale du gestionnaire de formules
final PrepaMathFormulaManager prepaMathFormulaManager =
    PrepaMathFormulaManager();

/// Instance globale du g√©n√©rateur de quiz
final QuizGenerator quizGenerator =
    QuizGenerator(formulaManager: prepaMathFormulaManager);
