/// <cursor>
///
/// üßÆ MOTEUR DE CALCUL MATH√âMATIQUE POUR PR√âPA
///
/// Architecture isol√©e pour le traitement des formules math√©matiques de pr√©pa.
/// S√©paration compl√®te de la logique m√©tier des formules de la g√©n√©ration d'images.
///
/// COMPOSANTS PRINCIPAUX:
/// - ParameterType: Types de param√®tres pour validation automatique
/// - FormulaType: Classification des formules math√©matiques
/// - FormulaParameter: Param√®tre avec validation intelligente
/// - EnhancedFormulaTemplate: Template de formule avec calcul automatique
/// - FormulaVariant: Variante d'une formule (originale/invers√©e)
/// - EnhancedFormulaPerturbationGenerator: G√©n√©ration de perturbations p√©dagogiques
/// - Templates pr√©pa: Collections de formules bin√¥me/combinaisons/sommes
///
/// √âTAT ACTUEL:
/// - Architecture compl√®tement isol√©e du g√©n√©rateur d'images
/// - Calcul automatique des coefficients binomiaux, d√©veloppements, sommes
/// - Validation intelligente des param√®tres selon leur type et contraintes
/// - G√©n√©ration d'exemples p√©dagogiques
/// - G√©n√©ration d'exemples et variants de formules
/// - 27 formules organis√©es en 3 cat√©gories (Bin√¥me, Combinaisons, Sommes)
///
/// HISTORIQUE R√âCENT:
/// - 2025-01-27: Cr√©ation de l'architecture isol√©e
/// - Extraction compl√®te depuis educational_image_generator.dart
/// - S√©paration des pr√©occupations (calcul vs g√©n√©ration d'images)
/// - Optimisation des performances de calcul
/// - Validation automatique et g√©n√©ration d'exemples
///
/// üîß POINTS D'ATTENTION:
/// - Performance: Calculs limit√©s pour √©viter d√©bordements (n ‚â§ 10 pour bin√¥me)
/// - Validation: V√©rification automatique des contraintes math√©matiques
/// - G√©n√©ration d'exemples: Cr√©ation automatique d'exemples p√©dagogiques valides
/// - Calculs: Validation automatique et exemples p√©dagogiques
/// - Factorielle: Limitation √† n ‚â§ 12 pour √©viter d√©bordements
///
/// üöÄ PROCHAINES √âTAPES:
/// - Ajouter plus de types de formules (int√©grales, d√©riv√©es)
/// - Optimiser les algorithmes de calcul pour grandes valeurs
/// - Ajouter support pour formules param√©triques complexes
/// - Impl√©menter cache pour calculs fr√©quents
/// - Ajouter validation plus sophistiqu√©e des expressions LaTeX
///
/// üîó FICHIERS LI√âS:
/// - educational_image_generator.dart: Utilise ce moteur pour les formules
/// - binome_formules_screen.dart: Interface utilisateur
/// - Nouvelle architecture unifi√©e avec approche "tout substituable"
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (C≈ìur du syst√®me √©ducatif math√©matique)
/// üìÖ Derni√®re modification: 2025-01-27
/// </cursor>

import 'dart:math' as math;

// Import pour les calculs math√©matiques

/// =====================================================================================
/// üîÑ PR√âPROCESSEUR DE FORMULES LATEX
/// =====================================================================================

/// Pr√©processeur pour convertir les variables marqu√©es en LaTeX standard
///
/// Utilise la syntaxe {VAR:nom} pour marquer les variables dans les templates,
/// puis les convertit en variables LaTeX standard pour l'affichage.
///
/// Exemple: {VAR:n} ‚Üí n, {VAR:alpha} ‚Üí alpha
class FormulaPreprocessor {
  /// Regex pour d√©tecter les variables marqu√©es {VAR:nom}
  static final RegExp _variableRegex =
      RegExp(r'\{VAR:([a-zA-Z][a-zA-Z0-9]*)\}');

  /// Convertit les variables marqu√©es en LaTeX standard
  ///
  /// Exemples:
  /// - '{VAR:n}' ‚Üí 'n'
  /// - '\\binom{{VAR:n}}{{VAR:k}}' ‚Üí '\\binom{n}{k}'
  /// - '{VAR:alpha}^{VAR:beta}' ‚Üí 'alpha^{beta}'
  static String processLatex(String rawLatex) {
    if (rawLatex.isEmpty) return rawLatex;

    return rawLatex.replaceAllMapped(_variableRegex, (match) {
      final variableName = match.group(1)!;
      return variableName;
    });
  }

  /// Extrait les noms de variables depuis le LaTeX marqu√©
  ///
  /// Retourne la liste unique des variables trouv√©es
  /// Exemple: '\\binom{{VAR:n}}{{VAR:k}}' ‚Üí ['n', 'k']
  static List<String> extractVariableNames(String rawLatex) {
    if (rawLatex.isEmpty) return [];

    return _variableRegex
        .allMatches(rawLatex)
        .map((match) => match.group(1)!)
        .toSet() // √âliminer les doublons
        .toList();
  }

  /// Convertit une variable standard en variable marqu√©e
  ///
  /// Utile pour les tests et la conversion inverse
  /// Exemple: 'n' ‚Üí '{VAR:n}'
  static String markVariable(String variableName) {
    return '{VAR:$variableName}';
  }

  /// V√©rifie si une cha√Æne contient des variables marqu√©es
  static bool hasMarkedVariables(String text) {
    return _variableRegex.hasMatch(text);
  }

  /// Compte le nombre de variables marqu√©es dans une cha√Æne
  static int countMarkedVariables(String text) {
    return _variableRegex.allMatches(text).length;
  }

  /// Remplace les variables marqu√©es par des valeurs sp√©cifiques
  ///
  /// Exemple: substitueVariables('{VAR:n}+{VAR:k}', {'n': '5', 'k': '2'}) ‚Üí '5+2'
  static String substituteVariables(
      String rawLatex, Map<String, String> values) {
    return rawLatex.replaceAllMapped(_variableRegex, (match) {
      final variableName = match.group(1)!;
      return values[variableName] ??
          match.group(0)!; // Garder original si pas trouv√©
    });
  }
}

/// =====================================================================================
/// üßÆ ARCHITECTURE DE VALIDATION ET CALCUL
/// =====================================================================================

/// Type de param√®tre pour la validation automatique des formules
enum ParameterType {
  /// Entiers relatifs (..., -2, -1, 0, 1, 2, ...)
  INTEGER,

  /// Entiers naturels (0, 1, 2, 3, ...)
  NATURAL,

  /// Nombres positifs stricts (> 0)
  POSITIVE,

  /// Nombres r√©els (-‚àû, +‚àû)
  REAL,
}

/// Type de formule pour le calcul automatique
enum FormulaType {
  /// Coefficients binomiaux C(n,k)
  COMBINAISON,

  /// D√©veloppement du bin√¥me de Newton (a+b)^n
  BINOME,

  /// Formules de sommation Œ£
  SOMME,

  /// Type non identifi√©
  UNKNOWN,
}

/// Param√®tre d'une formule avec validation intelligente
class FormulaParameter {
  /// Nom du param√®tre (ex: 'n', 'k', 'a', 'b')
  final String name;

  /// Description p√©dagogique du param√®tre
  final String description;

  /// Indique si ce param√®tre peut √™tre invers√© avec un autre
  final bool canInvert;

  /// Type du param√®tre pour validation
  final ParameterType type;

  /// Valeur minimale autoris√©e (optionnel)
  final num? minValue;

  /// Valeur maximale autoris√©e (optionnel)
  final num? maxValue;

  const FormulaParameter({
    required this.name,
    required this.description,
    this.canInvert = false,
    this.type = ParameterType.INTEGER,
    this.minValue,
    this.maxValue,
  });

  /// Valide une valeur num√©rique pour ce param√®tre
  /// Retourne true si la valeur est valide selon le type et les contraintes
  bool validate(num value) {
    // Validation selon le type de param√®tre
    switch (type) {
      case ParameterType.NATURAL:
        if (value < 0 || value != value.toInt()) return false;
        break;
      case ParameterType.POSITIVE:
        if (value <= 0) return false;
        break;
      case ParameterType.INTEGER:
        if (value != value.toInt()) return false;
        break;
      case ParameterType.REAL:
        // Pas de restriction suppl√©mentaire pour les r√©els
        break;
    }

    // Validation des bornes si sp√©cifi√©es
    if (minValue != null && value < minValue!) return false;
    if (maxValue != null && value > maxValue!) return false;

    return true;
  }
}

/// =====================================================================================
/// üéÆ SYST√àME DE CODES QUIZ PR√âPA
/// =====================================================================================

/// Mode de quiz pour organiser les variantes de formules
enum QuizMode {
  /// Mode 0: Formules originales sans modification
  normal(0, "Normal", "Formules originales sans modification"),
  
  /// Mode 1: Variables invers√©es (n‚Üîk, a‚Üîb)
  inversion(1, "Inversion", "Variables invers√©es (n‚Üîk, a‚Üîb)"),
  
  /// Mode 2: Original + invers√© m√©lang√©s dans le m√™me quiz
  mixte(2, "Mixte", "Original + invers√© m√©lang√©s dans le m√™me quiz"),
  
  /// Mode 3: Variables renomm√©es (n‚Üíx, k‚Üíy)
  substitution(3, "Substitution", "Variables renomm√©es (n‚Üíx, k‚Üíy)"),
  
  /// Mode 4: Difficult√© progressive (simples ‚Üí complexes)
  progressive(4, "Progressive", "Difficult√© progressive (simples ‚Üí complexes)");

  const QuizMode(this.code, this.nom, this.description);
  final int code;
  final String nom;
  final String description;
}

/// Configuration compl√®te d'un quiz pr√©pa
class QuizConfiguration {
  /// Mode du quiz (d√©finit les variantes de formules)
  final QuizMode mode;
  
  /// Niveau de difficult√© (1-5, filtre les formules)
  final int difficulty;
  
  /// Cat√©gories √† inclure ['binome', 'combinaisons', 'sommes']
  final List<String> categories;
  
  /// Afficher des exemples num√©riques
  final bool showExamples;
  
  /// Nombre de questions dans le quiz
  final int questionCount;
  
  /// M√©langer les formules originales et variantes
  final bool shuffleVariants;

  const QuizConfiguration({
    this.mode = QuizMode.mixte, // Par d√©faut: mode mixte (code 2)
    this.difficulty = 3,
    this.categories = const ['binome', 'combinaisons', 'sommes'],
    this.showExamples = true,
    this.questionCount = 6,
    this.shuffleVariants = true,
  });
  
  /// Cr√©e une configuration avec des param√®tres personnalis√©s
  QuizConfiguration copyWith({
    QuizMode? mode,
    int? difficulty,
    List<String>? categories,
    bool? showExamples,
    int? questionCount,
    bool? shuffleVariants,
  }) {
    return QuizConfiguration(
      mode: mode ?? this.mode,
      difficulty: difficulty ?? this.difficulty,
      categories: categories ?? this.categories,
      showExamples: showExamples ?? this.showExamples,
      questionCount: questionCount ?? this.questionCount,
      shuffleVariants: shuffleVariants ?? this.shuffleVariants,
    );
  }
  
  @override
  String toString() {
    return 'QuizConfiguration(mode: ${mode.nom}, difficulty: $difficulty, '
           'categories: $categories, questions: $questionCount)';
  }
}

/// G√©n√©rateur de quiz adaptatif selon la configuration
class QuizGenerator {
  /// G√©n√®re un quiz selon la configuration donn√©e
  static List<EnhancedFormulaTemplate> generateQuiz(QuizConfiguration config) {
    // 1. R√©cup√©rer les formules selon les cat√©gories
    List<EnhancedFormulaTemplate> baseFormulas = [];
    
    for (final category in config.categories) {
      switch (category) {
        case 'binome':
          baseFormulas.addAll(PrepaMathFormulaManager.binomeFormulas);
          break;
        case 'combinaisons':
          baseFormulas.addAll(PrepaMathFormulaManager.combinaisonsFormulas);
          break;
        case 'sommes':
          baseFormulas.addAll(PrepaMathFormulaManager.sommesFormulas);
          break;
      }
    }
    
    // 2. Appliquer le mode de quiz
    List<EnhancedFormulaTemplate> quizFormulas = [];
    
    switch (config.mode) {
      case QuizMode.normal:
        quizFormulas = baseFormulas;
        break;
        
      case QuizMode.inversion:
        // Utiliser uniquement les versions invers√©es
        quizFormulas = baseFormulas
            .where((f) => f.numberOfVariables == 2)
            .map((f) => f.createWithSimpleInversion())
            .toList();
        break;
        
      case QuizMode.mixte:
        // M√©langer originales et invers√©es (50/50)
        final originals = baseFormulas.take(baseFormulas.length ~/ 2).toList();
        final inverted = baseFormulas
            .skip(baseFormulas.length ~/ 2)
            .where((f) => f.numberOfVariables == 2)
            .map((f) => f.createWithSimpleInversion())
            .toList();
        quizFormulas = [...originals, ...inverted];
        break;
        
      case QuizMode.substitution:
        // TODO: Impl√©menter substitution de variables
        quizFormulas = baseFormulas;
        break;
        
      case QuizMode.progressive:
        // TODO: Impl√©menter tri par difficult√©
        quizFormulas = baseFormulas;
        break;
    }
    
    // 3. M√©langer si demand√©
    if (config.shuffleVariants) {
      quizFormulas.shuffle();
    }
    
    // 4. Limiter au nombre de questions demand√©
    return quizFormulas.take(config.questionCount).toList();
  }
  
  /// G√©n√®re un quiz avec la configuration par d√©faut (mode mixte)
  static List<EnhancedFormulaTemplate> generateDefaultQuiz() {
    return generateQuiz(const QuizConfiguration());
  }
  
  /// G√©n√®re un quiz avec un mode sp√©cifique
  static List<EnhancedFormulaTemplate> generateQuizWithMode(QuizMode mode) {
    return generateQuiz(QuizConfiguration(mode: mode));
  }
}

/// =====================================================================================
/// üéØ ARCHITECTURE DES FORMULES √âTENDUES
/// =====================================================================================

/// Template de formule √©tendu avec calcul automatique et validation intelligente
///
/// üîÑ ARCHITECTURE √Ä 3 NIVEAUX :
/// 1. latexOrigine   : LaTeX pur d'origine (ex: '\binom{n}{k} = \frac{n!}{k!(n-k)!}')
/// 2. latexVariable  : LaTeX avec variables marqu√©es (ex: '\binom{{VAR:n}}{{VAR:k}} = \frac{{VAR:n}!}{{VAR:k}!({VAR:n}-{VAR:k})!}')
/// 3. latex          : LaTeX final pour affichage (avec substitutions √©ventuelles)
class EnhancedFormulaTemplate {
  /// üìù NIVEAU ORIGINE : LaTeX d'origine (immutable)
  final String latexOrigine;
  final String? leftLatexOrigine;
  final String? rightLatexOrigine;

  /// üîÑ NIVEAU VARIABLE : LaTeX avec variables identifi√©es {VAR:} (donn√©e d'entr√©e)
  final String latexVariable;

  /// Description p√©dagogique de la formule
  final String description;

  /// Liste des param√®tres de la formule avec leurs contraintes
  final List<FormulaParameter> parameters;

  const EnhancedFormulaTemplate({
    required this.latexOrigine,
    required this.description,
    required this.parameters,
    this.latexVariable = '', // TEMPORAIRE: optionnel pendant migration
    this.leftLatexOrigine,
    this.rightLatexOrigine,
  });

  /// üéØ NIVEAU FINAL : LaTeX final g√©n√©r√© avec getters par d√©faut
  String get finalLatexVariable => latexVariable.isEmpty
      ? _convertToVariableSyntax(latexOrigine)
      : latexVariable;

  /// üîÑ GETTERS AVEC SPLIT AUTOMATIQUE : calcul√©s √† partir de finalLatexVariable
  String get leftLatexVariable => _splitLeft(finalLatexVariable);
  String get rightLatexVariable => _splitRight(finalLatexVariable);
  String get finalLeftLatexVariable => leftLatexVariable;
  String get finalRightLatexVariable => rightLatexVariable;

  /// üéØ NIVEAU FINAL : LaTeX final g√©n√©r√© (par d√©faut = origine, modifiable par transformations)
  String get latex => _applySubstitutions(finalLatexVariable);
  String get leftLatex => _applySubstitutions(finalLeftLatexVariable);
  String get rightLatex => _applySubstitutions(finalRightLatexVariable);

  /// üìä M√âTADONN√âES : Nombre de variables dans la formule
  int get numberOfVariables =>
      FormulaPreprocessor.extractVariableNames(finalLatexVariable).length;

  /// Nombre de param√®tres de la formule
  int get parameterCount => parameters.length;

  /// Liste des noms des variables/param√®tres
  List<String> get variableNames => parameters.map((p) => p.name).toList();

  /// Liste des variables qui peuvent √™tre invers√©es
  List<String> get invertibleVariables =>
      parameters.where((p) => p.canInvert).map((p) => p.name).toList();

  /// Obtient la partie gauche de la formule (avant le =)
  String get leftSide {
    return leftLatex;
  }

  /// Obtient la partie droite de la formule (apr√®s le =)
  String get rightSide {
    return rightLatex;
  }

  /// Obtient la partie gauche avec variables {VAR:} visibles
  String get leftSideWithVariables {
    // Si leftLatex est d√©fini, d'abord g√©n√©rer la version avec {VAR:}
    final withVars = _generateLatexVariableFromOriginal(leftLatex);
    return withVars;
  }

  /// Obtient la partie droite avec variables {VAR:} visibles
  String get rightSideWithVariables {
    // Si rightLatex est d√©fini, d'abord g√©n√©rer la version avec {VAR:}
    final withVars = _generateLatexVariableFromOriginal(rightLatex);
    return withVars;
  }

  /// G√©n√®re la version avec variables {VAR:} √† partir d'une formule originale
  static String _generateLatexVariableFromOriginal(String origine) {
    String result = origine;

    // 1. Capturer les variables avec underscore (ex: C_n, a_i)
    result = result.replaceAllMapped(RegExp(r'([a-zA-Z])_([a-zA-Z0-9]+)'),
        (match) => '{VAR:${match.group(1)}_${match.group(2)}}');

    // 2. Capturer les variables simples dans les contextes LaTeX courants
    // Variables dans \binom{n}{k}
    result = result.replaceAllMapped(
        RegExp(r'\\binom\{([a-zA-Z])\}\{([a-zA-Z])\}'),
        (match) =>
            r'\binom{{VAR:' +
            match.group(1)! +
            r'}}{{VAR:' +
            match.group(2)! +
            r'}}');

    // Variables dans \frac{n!}{k!...}
    result = result.replaceAllMapped(
        RegExp(r'([a-zA-Z])!'), (match) => '{VAR:${match.group(1)}}!');

    // Variables isol√©es dans certains contextes (entour√©es d'espaces, parenth√®ses, op√©rateurs)
    result = result.replaceAllMapped(
        RegExp(r'(?<=[\s\(\)\+\-\*=]|^)([a-zA-Z])(?=[\s\(\)\+\-\*=!]|$)'),
        (match) => '{VAR:${match.group(1)}}');

    return result;
  }

  /// Obtient les variables extraites de la formule
  List<String> get extractedVariables =>
      FormulaPreprocessor.extractVariableNames(finalLatexVariable);

  /// Substitue les variables marqu√©es dans la formule
  String substituteMarkedVariables(Map<String, String> values) {
    return FormulaPreprocessor.substituteVariables(finalLatexVariable, values);
  }

  /// G√©n√®re une version avec inversion de variables
  /// Exemple: inverser n et k dans \binom{{VAR:n}}{{VAR:k}}
  String generateWithInversion(String var1, String var2) {
    return finalLatexVariable
        .replaceAll('{VAR:$var1}', '{TEMP:$var2}')
        .replaceAll('{VAR:$var2}', '{VAR:$var1}')
        .replaceAll('{TEMP:$var2}', '{VAR:$var2}');
  }

  /// G√©n√®re une version avec substitutions de variables
  /// Exemple: remplacer n par x, k par y
  String generateWithSubstitutions(Map<String, String> substitutions) {
    String result = finalLatexVariable;
    for (final entry in substitutions.entries) {
      result = result.replaceAll('{VAR:${entry.key}}', '{VAR:${entry.value}}');
    }
    return result;
  }

  /// G√©n√®re le latex final √† partir d'une version avec variables
  String convertVariablesToLatex(String variableVersion) {
    return FormulaPreprocessor.processLatex(variableVersion);
  }

  /// üîÑ FONCTION D'INVERSION SIMPLE : Inverse 2 variables si numberOfVariables == 2
  EnhancedFormulaTemplate createWithSimpleInversion() {
    if (numberOfVariables != 2) {
      throw ArgumentError(
          'Inversion simple possible uniquement avec 2 variables (actuel: $numberOfVariables)');
    }

    final variables =
        FormulaPreprocessor.extractVariableNames(finalLatexVariable);
    final var1 = variables[0];
    final var2 = variables[1];

    // Inverser les variables dans latexVariable
    final invertedLatexVariable = finalLatexVariable
        .replaceAll('{VAR:$var1}', '{TEMP:$var2}')
        .replaceAll('{VAR:$var2}', '{VAR:$var1}')
        .replaceAll('{TEMP:$var2}', '{VAR:$var2}');

    final invertedLeftLatexVariable = leftLatexVariable
        .replaceAll('{VAR:$var1}', '{TEMP:$var2}')
        .replaceAll('{VAR:$var2}', '{VAR:$var1}')
        .replaceAll('{TEMP:$var2}', '{VAR:$var2}');

    final invertedRightLatexVariable = rightLatexVariable
        .replaceAll('{VAR:$var1}', '{TEMP:$var2}')
        .replaceAll('{VAR:$var2}', '{VAR:$var1}')
        .replaceAll('{TEMP:$var2}', '{VAR:$var2}');

    // Cr√©er une nouvelle instance avec inversion
    return _EnhancedFormulaTemplateWithInversion(
      original: this,
      invertedLatexVariable: invertedLatexVariable,
      invertedLeftLatexVariable: invertedLeftLatexVariable,
      invertedRightLatexVariable: invertedRightLatexVariable,
    );
  }

  /// üîß M√âTHODES INTERNES DE CONVERSION

  /// Convertit un LaTeX d'origine vers la syntaxe avec variables marqu√©es
  ///
  /// D√©tecte automatiquement les variables (lettres isol√©es) et les convertit en {VAR:nom}
  /// Exemples:
  /// - '\binom{n}{k}' ‚Üí '\binom{{VAR:n}}{{VAR:k}}'
  /// - '(a+b)^{n}' ‚Üí '({VAR:a}+{VAR:b})^{{VAR:n}}'
  String _convertToVariableSyntax(String originalLatex) {
    // Utiliser la logique am√©lior√©e pour d√©tecter toutes les variables
    return _generateLatexVariableFromOriginal(originalLatex);
  }

  /// Applique les substitutions finales pour l'affichage
  ///
  /// Pour l'instant, convertit simplement {VAR:nom} ‚Üí nom
  /// Plus tard pourra appliquer des substitutions num√©riques
  String _applySubstitutions(String variableLatex) {
    // Pour l'instant, on utilise le pr√©processeur pour convertir vers l'affichage
    return FormulaPreprocessor.processLatex(variableLatex);
  }

  /// Split gauche de la formule variable
  String _splitLeft(String formula) {
    final parts = formula.split(' = ');
    if (parts.length >= 2) {
      return parts[0].trim();
    }
    final simpleParts = formula.split('=');
    return simpleParts.isNotEmpty ? simpleParts[0].trim() : formula;
  }

  /// Split droite de la formule variable
  String _splitRight(String formula) {
    final parts = formula.split(' = ');
    if (parts.length >= 2) {
      return parts.sublist(1).join(' = ').trim();
    }
    final simpleParts = formula.split('=');
    return simpleParts.length > 1
        ? simpleParts.sublist(1).join('=').trim()
        : '';
  }

  /// =====================================================================================
  /// üîÑ SUBSTITUTION DE VARIABLES - APPROCHE "TOUT SUBSTITUABLE"
  /// =====================================================================================

  /// Substitue les variables marqu√©es dans l'expression LaTeX
  ///
  /// Avec l'approche "tout substituable", seules les variables marqu√©es avec '_'
  /// sont substitu√©es. Les autres variables restent inchang√©es.
  ///
  /// Exemple: r'(_a+_b)^n' avec {'_a': '2', '_b': '3', 'n': '2'}
  /// devient: r'(2+3)^2'
  String substitute(Map<String, String> values) {
    String result = latex;

    // Substitution directe des variables marqu√©es
    values.forEach((markedVar, replacement) {
      result = result.replaceAll(markedVar, replacement);
    });

    return result;
  }

  /// =====================================================================================
  /// üßÆ CALCUL AUTOMATIQUE
  /// =====================================================================================

  /// Calcule la valeur num√©rique de la formule avec les param√®tres donn√©s
  ///
  /// [parameterValues]: Map associant nom du param√®tre -> valeur num√©rique
  /// [validateParameters]: Si true, valide les param√®tres avant calcul
  ///
  /// Retourne la valeur calcul√©e ou null si erreur/invalide
  num? calculate(
    Map<String, num> parameterValues, {
    bool validateParameters = true,
  }) {
    // Validation des param√®tres si demand√©
    if (validateParameters && !_validateParameters(parameterValues)) {
      return null;
    }

    // Calcul selon le type de formule d√©tect√© automatiquement
    return _computeFormula(parameterValues);
  }

  /// Valide tous les param√®tres fournis
  bool _validateParameters(Map<String, num> values) {
    for (final param in parameters) {
      final value = values[param.name];
      if (value == null) return false;
      if (!param.validate(value)) return false;
    }
    return true;
  }

  /// Identifie automatiquement le type de formule d'apr√®s son expression LaTeX
  FormulaType _identifyFormulaType() {
    if (latex.contains(r'\binom')) return FormulaType.COMBINAISON;
    if (latex.contains(r'\sum') && latex.contains('k ='))
      return FormulaType.SOMME;
    if (latex.contains('^n') || latex.contains('^2') || latex.contains('^3')) {
      return FormulaType.BINOME;
    }
    return FormulaType.UNKNOWN;
  }

  /// Calcule la formule selon son type d√©tect√©
  num? _computeFormula(Map<String, num> values) {
    switch (_identifyFormulaType()) {
      case FormulaType.COMBINAISON:
        return _calculateCombinaison(values);
      case FormulaType.BINOME:
        return _calculateBinome(values);
      case FormulaType.SOMME:
        return _calculateSomme(values);
      default:
        return null;
    }
  }

  /// Calcule un coefficient binomial C(n,k) = n! / (k! * (n-k)!)
  num? _calculateCombinaison(Map<String, num> values) {
    final n = values['n']?.toInt();
    final k = values['k']?.toInt();
    if (n == null || k == null || k > n || k < 0) return null;

    return _factorial(n) / (_factorial(k) * _factorial(n - k));
  }

  /// Calcule un d√©veloppement binomial (_a+_b)^n = Œ£ C(n,k) * _a^(n-k) * _b^k
  num? _calculateBinome(Map<String, num> values) {
    final a = values['_a'];
    final b = values['_b'];
    final n = values['n']?.toInt();
    if (a == null || b == null || n == null || n < 0) return null;

    num result = 0;
    for (int k = 0; k <= n; k++) {
      final coeff = _calculateCombinaison({'n': n, 'k': k});
      if (coeff == null) return null;
      result += coeff * math.pow(a, n - k) * math.pow(b, k);
    }
    return result;
  }

  /// Calcule une somme Œ£ (actuellement supporte Œ£(k=1 to n) k = n(n+1)/2)
  num? _calculateSomme(Map<String, num> values) {
    final n = values['n']?.toInt();
    if (n == null || n < 1) return null;

    // Formule de la somme des n premiers entiers naturels
    return n * (n + 1) / 2;
  }

  /// Calcule la factorielle d'un nombre entier
  /// Limitation: n ‚â§ 12 pour √©viter d√©bordement num√©rique
  int _factorial(int n) {
    if (n <= 1) return 1;
    if (n > 12) return 1; // Limitation pour √©viter d√©bordement

    int result = 1;
    for (int i = 2; i <= n; i++) {
      result *= i;
    }
    return result;
  }

  /// =====================================================================================
  /// üé≤ G√âN√âRATION DE VARIANTES ET EXEMPLES
  /// =====================================================================================

  /// G√©n√®re des variantes de la formule (original uniquement)
  List<FormulaVariant> generateSmartVariants() {
    return [FormulaVariant(latex: latex, description: description)];
  }

  /// G√©n√®re des exemples num√©riques valides pour cette formule
  ///
  /// [count]: Nombre d'exemples √† g√©n√©rer (d√©faut: 5)
  /// Retourne une liste de maps associant nom_param√®tre -> valeur_valide
  List<Map<String, num>> generateValidExamples({int count = 5}) {
    final examples = <Map<String, num>>[];

    for (int i = 0; i < count; i++) {
      final example = <String, num>{};

      // G√©n√®re des valeurs valides pour chaque param√®tre
      for (final param in parameters) {
        num value = 0; // Valeur par d√©faut
        switch (param.type) {
          case ParameterType.NATURAL:
            value = math.Random().nextInt(8) + (param.minValue?.toInt() ?? 0);
            break;
          case ParameterType.POSITIVE:
            value = math.Random().nextInt(5) + 1;
            break;
          case ParameterType.INTEGER:
            value = math.Random().nextInt(10) - 5;
            break;
          case ParameterType.REAL:
            value = (math.Random().nextDouble() - 0.5) * 10;
            break;
        }

        // Respecter les bornes d√©finies
        if (param.minValue != null && value < param.minValue!) {
          value = param.minValue!;
        }
        if (param.maxValue != null && value > param.maxValue!) {
          value = param.maxValue!;
        }

        example[param.name] = value;
      }

      // V√©rifier que l'exemple produit une formule valide
      if (_validateParameters(example)) {
        examples.add(example);
      }
    }

    return examples;
  }
}

/// Variante d'une formule g√©n√©r√©e (utilis√©e par EnhancedFormulaTemplate)
class FormulaVariant {
  /// Expression LaTeX de la variante
  final String latex;

  /// Description p√©dagogique de la variante
  final String description;

  const FormulaVariant({
    required this.latex,
    required this.description,
  });
}

/// =====================================================================================
/// üîÑ G√âN√âRATEUR DE PERTURBATIONS P√âDAGOGIQUES
/// =====================================================================================

/// Classe sp√©cialis√©e pour formules avec inversion
class _EnhancedFormulaTemplateWithInversion extends EnhancedFormulaTemplate {
  final EnhancedFormulaTemplate original;
  final String invertedLatexVariable;
  final String invertedLeftLatexVariable;
  final String invertedRightLatexVariable;

  const _EnhancedFormulaTemplateWithInversion({
    required this.original,
    required this.invertedLatexVariable,
    required this.invertedLeftLatexVariable,
    required this.invertedRightLatexVariable,
  }) : super(
          latexOrigine: '',
          description: '',
          parameters: const [],
        );

  @override
  String get latexOrigine => original.latexOrigine;

  @override
  String get description => '${original.description} (invers√©)';

  @override
  List<FormulaParameter> get parameters => original.parameters;

  @override
  String get latexVariable => invertedLatexVariable;

  @override
  String get leftLatexVariable => invertedLeftLatexVariable;

  @override
  String get rightLatexVariable => invertedRightLatexVariable;

  @override
  String get latex => FormulaPreprocessor.processLatex(invertedLatexVariable);

  @override
  String get leftLatex =>
      FormulaPreprocessor.processLatex(invertedLeftLatexVariable);

  @override
  String get rightLatex =>
      FormulaPreprocessor.processLatex(invertedRightLatexVariable);
}

/// G√©n√©rateur √©tendu de perturbations p√©dagogiques pour les formules
class EnhancedFormulaPerturbationGenerator {
  /// G√©n√®re une liste de formules LaTeX √† partir des templates
  static List<String> generateLatexFormulas(
      List<EnhancedFormulaTemplate> templates) {
    final formulas = <String>[];

    for (final template in templates) {
      final variants = template.generateSmartVariants();
      for (final variant in variants) {
        formulas.add(variant.latex);
      }
    }

    return formulas;
  }

  /// G√©n√®re les descriptions correspondantes
  static List<String> generateDescriptions(
      List<EnhancedFormulaTemplate> templates) {
    final descriptions = <String>[];

    for (final template in templates) {
      final variants = template.generateSmartVariants();
      for (final variant in variants) {
        descriptions.add(variant.description);
      }
    }

    return descriptions;
  }

  /// Valide que tous les templates sont coh√©rents
  static bool validateTemplates(List<EnhancedFormulaTemplate> templates) {
    for (final template in templates) {
      // V√©rifier que les noms de param√®tres sont uniques
      final paramNames = template.parameters.map((p) => p.name).toList();
      if (paramNames.length != paramNames.toSet().length) {
        return false; // Doublons dans les noms
      }

      // Tester avec des exemples g√©n√©r√©s
      final examples = template.generateValidExamples(count: 1);
      if (examples.isNotEmpty) {
        final result = template.calculate(examples.first);
        if (result == null) {
          return false; // Calcul impossible
        }
      }
    }
    return true;
  }
}

/// =====================================================================================
/// üìö TEMPLATES DE FORMULES PR√âPA - BIN√îME DE NEWTON
/// =====================================================================================

/// Templates √©tendus pour les formules de Bin√¥me de Newton
final List<EnhancedFormulaTemplate> enhancedBinomeTemplates = [
  // D√©veloppement g√©n√©ral du bin√¥me
  EnhancedFormulaTemplate(
    latexOrigine: r'(a+b)^{n} = \sum_{k=0}^{n} \binom{n}{k} a^{n-k} b^{k}',
    latexVariable:
        r'({VAR:a}+{VAR:b})^{{VAR:n}} = \sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} {VAR:a}^{{VAR:n}-{VAR:k}} {VAR:b}^{{VAR:k}}',
    leftLatexOrigine: r'(a+b)^{n}',
    rightLatexOrigine: r'\sum_{k=0}^{n} \binom{n}{k} a^{n-k} b^{k}',
    description: 'd√©veloppement g√©n√©ral du bin√¥me de Newton',
    parameters: const [
      FormulaParameter(
        name: 'a',
        description: 'premi√®re variable (interchangeable avec _b)',
        canInvert: true,
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'b',
        description: 'seconde variable (interchangeable avec _a)',
        canInvert: true,
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'n',
        description: 'exposant entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 5, // Limite pour √©viter calculs trop lourds
      ),
    ],
  ),

  // Coefficient binomial de base
  EnhancedFormulaTemplate(
    latexOrigine: r'\binom{n}{k} = \frac{n!}{k!(n-k)!}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \frac{{VAR:n}!}{{VAR:k}!({VAR:n}-{VAR:k})!}',
    leftLatexOrigine: r'\binom{n}{k}',
    rightLatexOrigine: r'\frac{n!}{k!(n-k)!}',
    description: 'coefficient binomial de base',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'ensemble total',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
      FormulaParameter(
        name: 'k',
        description: 'sous-ensemble choisi',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  // D√©veloppement binomial sp√©cial
  EnhancedFormulaTemplate(
    latexOrigine: r'(1+a)^{n} = \sum_{k=0}^{n} \binom{n}{k} a^{k}',
    latexVariable:
        r'(1+{VAR:a})^{{VAR:n}} = \sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} {VAR:a}^{{VAR:k}}',
    leftLatexOrigine: r'(1+a)^{n}',
    rightLatexOrigine: r'\sum_{k=0}^{n} \binom{n}{k} a^{k}',
    description: 'd√©veloppement binomial sp√©cial',
    parameters: const [
      FormulaParameter(
        name: 'a',
        description: 'variable r√©elle',
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'n',
        description: 'exposant entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 5,
      ),
    ],
  ),

  // Alternance des coefficients binomiaux
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k} = 0',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} (-1)^{VAR:k} \binom{{VAR:n}}{{VAR:k}} = 0',
    leftLatexOrigine: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k}',
    rightLatexOrigine: r'0',
    description: 'somme altern√©e des coefficients binomiaux',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'exposant (doit √™tre ‚â• 1)',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
    ],
  ),

  // Somme oblique de Hockey-stick
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=r}^{n} \binom{k}{r} = \binom{n+1}{r+1}',
    latexVariable:
        r'\sum_{{VAR:k}={VAR:r}}^{{VAR:n}} \binom{{VAR:k}}{{VAR:r}} = \binom{{VAR:n}+1}{{VAR:r}+1}',
    leftLatexOrigine: r'\sum_{k=r}^{n} \binom{k}{r}',
    rightLatexOrigine: r'\binom{n+1}{r+1}',
    description: 'identit√© de hockey-stick',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'borne sup√©rieure',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'r',
        description: 'indice fixe (‚â§ n)',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  // Cas particuliers des coefficients binomiaux
  EnhancedFormulaTemplate(
    latexOrigine: r'\binom{n}{0} = 1',
    latexVariable: r'\binom{{VAR:n}}{0} = 1',
    leftLatexOrigine: r'\binom{n}{0}',
    rightLatexOrigine: r'1',
    description: 'coefficient binomial pour k=0',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille de l\'ensemble',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 15,
      ),
    ],
  ),

  EnhancedFormulaTemplate(
    latexOrigine: r'\binom{n}{n} = 1',
    latexVariable: r'\binom{{VAR:n}}{{VAR:n}} = 1',
    leftLatexOrigine: r'\binom{n}{n}',
    rightLatexOrigine: r'1',
    description: 'coefficient binomial pour k=n',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille de l\'ensemble',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 15,
      ),
    ],
  ),

  // Relation de Pascal
  EnhancedFormulaTemplate(
    latexOrigine: r'\binom{n}{k} = \binom{n-1}{k} + \binom{n-1}{k-1}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \binom{{VAR:n}-1}{{VAR:k}} + \binom{{VAR:n}-1}{{VAR:k}-1}',
    leftLatexOrigine: r'\binom{n}{k}',
    rightLatexOrigine: r'\binom{n-1}{k} + \binom{n-1}{k-1}',
    description: 'relation de r√©currence de Pascal',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'indice de ligne',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice de colonne',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  // Formule du bin√¥me pour (1+1)^n
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=0}^{n} \binom{n}{k} = 2^{n}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} = 2^{{VAR:n}}',
    leftLatexOrigine: r'\sum_{k=0}^{n} \binom{n}{k}',
    rightLatexOrigine: r'2^{n}',
    description: 'formule du bin√¥me pour (1+1)^n',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'exposant entier positif',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 8,
      ),
    ],
  ),

  // Sym√©trie des coefficients binomiaux
  EnhancedFormulaTemplate(
    latexOrigine: r'\binom{n}{k} = \binom{n}{n-k}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \binom{{VAR:n}}{{VAR:n}-{VAR:k}}',
    leftLatexOrigine: r'\binom{n}{k}',
    rightLatexOrigine: r'\binom{n}{n-k}',
    description: 'propri√©t√© de sym√©trie des coefficients binomiaux',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille totale de l\'ensemble',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice (interchangeable avec n-k)',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),
];

/// =====================================================================================
/// üî¢ TEMPLATES DE FORMULES PR√âPA - COMBINAISONS
/// =====================================================================================

/// Templates √©tendus pour les formules de Combinaisons
final List<EnhancedFormulaTemplate> enhancedCombinaisonsTemplates = [
  // D√©finition de base
  EnhancedFormulaTemplate(
    latexOrigine: r'\binom{n}{k} = \frac{n!}{k!\,(n-k)!}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \frac{{VAR:n}!}{{VAR:k}!\,({VAR:n}-{VAR:k})!}',
    leftLatexOrigine: r'\binom{n}{k}',
    rightLatexOrigine: r'\frac{n!}{k!\,(n-k)!}',
    description: 'd√©finition du coefficient binomial',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille de l\'ensemble',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'nombre d\'√©l√©ments choisis',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  // Propri√©t√© sym√©trique
  EnhancedFormulaTemplate(
    latexOrigine: r'\binom{n}{k} = \binom{n}{n-k}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \binom{{VAR:n}}{{VAR:n}-{VAR:k}}',
    leftLatexOrigine: r'\binom{n}{k}',
    rightLatexOrigine: r'\binom{n}{n-k}',
    description: 'sym√©trie des coefficients binomiaux',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille totale',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'indice (interchangeable avec n-k)',
        canInvert: true,
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  // Triangle de Pascal
  EnhancedFormulaTemplate(
    latexOrigine: r'\binom{n}{k} = \binom{n-1}{k} + \binom{n-1}{k-1}',
    latexVariable:
        r'\binom{{VAR:n}}{{VAR:k}} = \binom{{VAR:n}-1}{{VAR:k}} + \binom{{VAR:n}-1}{{VAR:k}-1}',
    leftLatexOrigine: r'\binom{n}{k}',
    rightLatexOrigine: r'\binom{n-1}{k} + \binom{n-1}{k-1}',
    description: 'relation de r√©currence du triangle de Pascal',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'ligne du triangle',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: 'k',
        description: 'position dans la ligne',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),

  // D√©veloppement binomial g√©n√©ral
  EnhancedFormulaTemplate(
    latexOrigine: r'(a+b)^n = \sum_{k=0}^{n} \binom{n}{k} a^{n-k} b^{k}',
    latexVariable:
        r'({VAR:a}+{VAR:b})^{VAR:n} = \sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} {VAR:a}^{{VAR:n}-{VAR:k}} {VAR:b}^{{VAR:k}}',
    leftLatexOrigine: r'(a+b)^n',
    rightLatexOrigine: r'\sum_{k=0}^{n} \binom{n}{k} a^{n-k} b^{k}',
    description: 'd√©veloppement binomial g√©n√©ral',
    parameters: const [
      FormulaParameter(
        name: 'a',
        description: 'premi√®re variable',
        canInvert: true,
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'b',
        description: 'seconde variable',
        canInvert: true,
        type: ParameterType.REAL,
      ),
      FormulaParameter(
        name: 'n',
        description: 'exposant',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 8,
      ),
    ],
  ),

  // Nombre total de sous-ensembles
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=0}^{n} \binom{n}{k} = 2^{n}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:n}}{{VAR:k}} = 2^{{VAR:n}}',
    leftLatexOrigine: r'\sum_{k=0}^{n} \binom{n}{k}',
    rightLatexOrigine: r'2^{n}',
    description: 'nombre total de sous-ensembles d\'un ensemble √† n √©l√©ments',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille de l\'ensemble',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 10,
      ),
    ],
  ),

  // Relation d'orthogonalit√©
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k} = 0',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} (-1)^{VAR:k} \binom{{VAR:n}}{{VAR:k}} = 0',
    leftLatexOrigine: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k}',
    rightLatexOrigine: r'0',
    description: 'somme altern√©e des coefficients binomiaux',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'degr√© (doit √™tre ‚â• 1)',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 10,
      ),
    ],
  ),

  // Identit√© de Chu-Vandermonde
  EnhancedFormulaTemplate(
    latexOrigine:
        r'\sum_{k=0}^{n} \binom{m}{k} \binom{n-m}{n-k} = \binom{n}{m}',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{{VAR:n}} \binom{{VAR:m}}{{VAR:k}} \binom{{VAR:n}-{VAR:m}}{{VAR:n}-{VAR:k}} = \binom{{VAR:n}}{{VAR:m}}',
    leftLatexOrigine: r'\sum_{k=0}^{n} \binom{m}{k} \binom{n-m}{n-k}',
    rightLatexOrigine: r'\binom{n}{m}',
    description: 'identit√© de Chu-Vandermonde (pour m fixe)',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'taille totale',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
      FormulaParameter(
        name: '_m',
        description: 'param√®tre fixe',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 12,
      ),
    ],
  ),
];

/// =====================================================================================
/// ‚àë TEMPLATES DE FORMULES PR√âPA - SOMMES
/// =====================================================================================

/// Templates √©tendus pour les formules de Sommes
final List<EnhancedFormulaTemplate> enhancedSommesTemplates = [
  // Somme des premiers entiers
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=1}^{n} k = \frac{n(n+1)}{2}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} {VAR:k} = \frac{{VAR:n}({VAR:n}+1)}{2}',
    leftLatexOrigine: r'\sum_{k=1}^{n} k',
    rightLatexOrigine: r'\frac{n(n+1)}{2}',
    description: 'somme des n premiers entiers naturels',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'borne sup√©rieure',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 25,
      ),
    ],
  ),

  // Somme des carr√©s
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=1}^{n} k^2 = \frac{n(n+1)(2n+1)}{6}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} {VAR:k}^2 = \frac{{VAR:n}({VAR:n}+1)(2n+1)}{6}',
    leftLatexOrigine: r'\sum_{k=1}^{n} k^2',
    rightLatexOrigine: r'\frac{n(n+1)(2n+1)}{6}',
    description: 'somme des carr√©s des n premiers entiers',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'borne sup√©rieure',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 20,
      ),
    ],
  ),

  // Somme des cubes
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=1}^{n} k^3 = \left(\frac{n(n+1)}{2}\right)^2',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} {VAR:k}^3 = \left(\frac{{VAR:n}({VAR:n}+1)}{2}\right)^2',
    leftLatexOrigine: r'\sum_{k=1}^{n} k^3',
    rightLatexOrigine: r'\left(\frac{n(n+1)}{2}\right)^2',
    description: 'somme des cubes des n premiers entiers',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'borne sup√©rieure',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 15,
      ),
    ],
  ),

  // S√©rie g√©om√©trique finie
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=0}^{n} q^k = \frac{1-q^{n+1}}{1-q} ',
    leftLatexOrigine: r'\sum_{k=0}^{n} q^k',
    rightLatexOrigine: r'\frac{1-q^{n+1}}{1-q}',
    description: 'somme des termes d\'une suite g√©om√©trique finie',
    parameters: const [
      FormulaParameter(
        name: '_q',
        description: 'raison de la suite g√©om√©trique',
        type: ParameterType.REAL,
        minValue: -3,
        maxValue: 3,
      ),
      FormulaParameter(
        name: 'n',
        description: 'nombre de termes',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 15,
      ),
    ],
  ),

  // S√©rie arithm√©tico-g√©om√©trique
  EnhancedFormulaTemplate(
    latexOrigine:
        r'\sum_{k=1}^{n} k \cdot q^k = \frac{q(1-(n+1)q^n + nq^{n+1})}{(1-q)^2}',
    leftLatexOrigine: r'\sum_{k=1}^{n} k \cdot q^k',
    rightLatexOrigine: r'\frac{q(1-(n+1)q^n + nq^{n+1})}{(1-q)^2}',
    description: 'somme d\'une s√©rie arithm√©tico-g√©om√©trique',
    parameters: const [
      FormulaParameter(
        name: 'q',
        description: 'raison g√©om√©trique',
        type: ParameterType.REAL,
        minValue: -2,
        maxValue: 2,
      ),
      FormulaParameter(
        name: 'n',
        description: 'borne sup√©rieure',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 12,
      ),
    ],
  ),

  // S√©rie g√©om√©trique infinie
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=0}^{\infty} q^k = \frac{1}{1-q} ',
    latexVariable:
        r'\sum_{{VAR:k}=0}^{\infty} {VAR:q}^{VAR:k} = \frac{1}{1-{VAR:q}} )',
    leftLatexOrigine: r'\sum_{k=0}^{\infty} q^k',
    rightLatexOrigine: r'\frac{1}{1-q}',
    description: 'somme d\'une s√©rie g√©om√©trique infinie convergente',
    parameters: const [
      FormulaParameter(
        name: 'q',
        description: 'raison (doit v√©rifier |q| < 1)',
        type: ParameterType.REAL,
        minValue: -0.9,
        maxValue: 0.9,
      ),
    ],
  ),

  // D√©riv√©e de la s√©rie g√©om√©trique
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=1}^{\infty} k \cdot q^{k-1} = \frac{1}{(1-q)^2} ',
    leftLatexOrigine: r'\sum_{k=1}^{\infty} k \cdot q^{k-1}',
    rightLatexOrigine: r'\frac{1}{(1-q)^2}',
    description:
        'somme pond√©r√©e par les indices (d√©riv√©e de la s√©rie g√©om√©trique)',
    parameters: const [
      FormulaParameter(
        name: 'q',
        description: 'raison (doit v√©rifier |q| < 1)',
        type: ParameterType.REAL,
        minValue: -0.9,
        maxValue: 0.9,
      ),
    ],
  ),

  // Somme √©l√©mentaire
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=0}^{n} 1 = n+1',
    latexVariable: r'\sum_{{VAR:k}=0}^{{VAR:n}} 1 = {VAR:n}+1',
    leftLatexOrigine: r'\sum_{k=0}^{n} 1',
    rightLatexOrigine: r'n+1',
    description: 'comptage des √©l√©ments d\'un ensemble fini',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre d\'√©l√©ments',
        type: ParameterType.NATURAL,
        minValue: 0,
        maxValue: 20,
      ),
    ],
  ),

  // Somme des impairs
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=1}^{n} (2k-1) = n^2',
    latexVariable: r'\sum_{{VAR:k}=1}^{{VAR:n}} (2k-1) = {VAR:n}^2',
    leftLatexOrigine: r'\sum_{k=1}^{n} (2k-1)',
    rightLatexOrigine: r'n^2',
    description: 'somme des n premiers nombres impairs',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'nombre de termes',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 15,
      ),
    ],
  ),

  // Somme t√©lescopique
  EnhancedFormulaTemplate(
    latexOrigine: r'\sum_{k=1}^{n} \frac{1}{k(k+1)} = 1 - \frac{1}{n+1}',
    latexVariable:
        r'\sum_{{VAR:k}=1}^{{VAR:n}} \frac{1}{{VAR:k}({VAR:k}+1)} = 1 - \frac{1}{{VAR:n}+1}',
    leftLatexOrigine: r'\sum_{k=1}^{n} \frac{1}{k(k+1)}',
    rightLatexOrigine: r'1 - \frac{1}{n+1}',
    description: 'somme t√©lescopique des fractions unitaires',
    parameters: const [
      FormulaParameter(
        name: 'n',
        description: 'borne sup√©rieure',
        type: ParameterType.NATURAL,
        minValue: 1,
        maxValue: 20,
      ),
    ],
  ),
];

/// =====================================================================================
/// üß™ FONCTIONS DE TEST ET VALIDATION
/// =====================================================================================

/// Teste le pr√©processeur de formules
void testFormulaPreprocessor() {
  print('üß™ TEST DU PR√âPROCESSEUR DE FORMULES');
  print('=' * 60);

  // Test basique de conversion
  final testCases = [
    '{VAR:n}',
    '\\binom{{VAR:n}}{{VAR:k}}',
    '({VAR:a}+{VAR:b})^{VAR:n}',
    '\\sum_{{k=0}}^{{VAR:n}} \\binom{{VAR:n}}{{k}} {VAR:x}^{{k}}',
  ];

  for (final testCase in testCases) {
    final processed = FormulaPreprocessor.processLatex(testCase);
    final variables = FormulaPreprocessor.extractVariableNames(testCase);
    print('üìù Entr√©e:  $testCase');
    print('‚úÖ Sortie:  $processed');
    print('üî§ Variables: $variables');
    print('');
  }

  // Test des templates modifi√©s
  print('üî¨ TEST DES TEMPLATES MODIFI√âS:');
  final testTemplate = enhancedBinomeTemplates[0];
  print('Template brut: ${testTemplate.latexOrigine}');
  print('Template trait√©: ${testTemplate.latex}');
  print('Variables extraites: ${testTemplate.extractedVariables}');
  print('Partie gauche: ${testTemplate.leftSide}');
  print('Partie droite: ${testTemplate.rightSide}');

  print('\n‚úÖ TESTS DU PR√âPROCESSEUR TERMIN√âS !');
}

/// Teste le calcul automatique des formules
void testEnhancedCalculations() {
  print('üß™ TEST DU CALCUL AUTOMATIQUE √âTENDU');
  print('=' * 60);

  // Test Combinaisons
  print('\nüßÆ TEST COMBINAISONS:');
  final combTemplate = enhancedCombinaisonsTemplates[0]; // C(n,k)
  print('Formule: ${combTemplate.latex}');

  final testValues1 = {'n': 5, 'k': 2};
  final result1 = combTemplate.calculate(testValues1);
  print('C(5,2) = $result1 (attendu: 10)');

  final testValues2 = {'n': 6, 'k': 3};
  final result2 = combTemplate.calculate(testValues2);
  print('C(6,3) = $result2 (attendu: 20)');

  // Test Bin√¥me
  print('\nüìö TEST BIN√îME:');
  final binomeTemplate = enhancedBinomeTemplates[0]; // (a+b)^n
  print('Formule: ${binomeTemplate.latex}');

  final binomeValues = {'a': 2, 'b': 3, 'n': 2};
  final binomeResult = binomeTemplate.calculate(binomeValues);
  print('(2+3)^2 = $binomeResult (attendu: 25)');

  // Test Sommes
  print('\nüìä TEST SOMMES:');
  final sommeTemplate = enhancedSommesTemplates[0]; // Œ£(k=1 to n) k
  print('Formule: ${sommeTemplate.latex}');

  final sommeValues = {'n': 10};
  final sommeResult = sommeTemplate.calculate(sommeValues);
  print('Œ£(k=1 to 10) k = $sommeResult (attendu: 55)');

  // Test g√©n√©ration d'exemples
  print('\nüé≤ TEST G√âN√âRATION D\'EXEMPLES:');
  final examples = combTemplate.generateValidExamples(count: 3);
  print('Exemples g√©n√©r√©s pour C(n,k):');
  for (final example in examples) {
    final result = combTemplate.calculate(example);
    print('  ${example} ‚Üí $result');
  }

  print('\n‚úÖ TESTS TERMIN√âS AVEC SUCC√àS !');
}

/// Valide tous les templates de formules
void validateEnhancedTemplates() {
  print('üîç VALIDATION DES TEMPLATES √âTENDUS');
  print('=' * 50);

  final allTemplates = [
    ...enhancedBinomeTemplates,
    ...enhancedCombinaisonsTemplates,
    ...enhancedSommesTemplates,
  ];

  print('Nombre total de templates: ${allTemplates.length}');

  bool allValid = true;
  for (final template in allTemplates) {
    // Test de g√©n√©ration d'exemples
    final examples = template.generateValidExamples(count: 2);
    print('\nüìã ${template.description}');
    print('   Param√®tres: ${template.parameterCount}');
    print('   Variables: ${template.variableNames}');
    print('   Invertibles: ${template.invertibleVariables}');

    if (examples.isNotEmpty) {
      final firstExample = examples.first;
      final result = template.calculate(firstExample);
      print('   ‚úÖ Calcul possible: $firstExample ‚Üí $result');
    } else {
      print('   ‚ùå Aucun exemple valide g√©n√©r√©');
      allValid = false;
    }

    // Test des variantes
    final variants = template.generateSmartVariants();
    print('   Variantes g√©n√©r√©es: ${variants.length}');
  }

  print('\n' + ('=' * 50));
  if (allValid) {
    print('‚úÖ TOUS LES TEMPLATES SONT VALIDES !');
  } else {
    print('‚ùå PROBL√àMES D√âTECT√âS DANS CERTAINS TEMPLATES');
  }
}

/// =====================================================================================
/// üèóÔ∏è GESTIONNAIRE PRINCIPAL DES FORMULES PR√âPA
/// =====================================================================================

/// Classe principale pour g√©rer toutes les formules math√©matiques de pr√©pa.
/// Gestionnaire unifi√© des formules math√©matiques (legacy pour compatibilit√©)
class UnifiedMathFormulaManager {
  static List<EnhancedFormulaTemplate> _prepaUnifiedFormulas = [];

  /// Initialiser avec les formules de la nouvelle architecture
  static void initialize() {
    if (_prepaUnifiedFormulas.isEmpty) {
      // Utiliser PrepaMathFormulaManager
      _prepaUnifiedFormulas = [
        ...PrepaMathFormulaManager.binomeFormulas,
        ...PrepaMathFormulaManager.combinaisonsFormulas,
        ...PrepaMathFormulaManager.sommesFormulas,
      ];

      print('üéØ UnifiedMathFormulaManager (NOUVELLE ARCHITECTURE):');
      print('   ‚Ä¢ Bin√¥me: ${PrepaMathFormulaManager.binomeFormulas.length}');
      print('   ‚Ä¢ Combinaisons: ${PrepaMathFormulaManager.combinaisonsFormulas.length}');
      print('   ‚Ä¢ Sommes: ${PrepaMathFormulaManager.sommesFormulas.length}');
      print('   ‚Ä¢ Pr√©pa unifi√©: ${_prepaUnifiedFormulas.length} formules');
    }
  }

  /// Obtenir les formules unifi√©es de pr√©pa (concat√©nation des 3 cat√©gories)
  static List<EnhancedFormulaTemplate> get prepaUnifiedFormulas =>
      _prepaUnifiedFormulas;

  /// Obtenir les formules bin√¥me
  static List<EnhancedFormulaTemplate> get binomeFormulas =>
      PrepaMathFormulaManager.binomeFormulas;

  /// Obtenir les formules de combinaisons
  static List<EnhancedFormulaTemplate> get combinaisonsFormulas =>
      PrepaMathFormulaManager.combinaisonsFormulas;

  /// Obtenir les formules de sommes
  static List<EnhancedFormulaTemplate> get sommesFormulas =>
      PrepaMathFormulaManager.sommesFormulas;
}

/// Manager principal des formules math√©matiques de pr√©pa.
/// Fournit une interface unifi√©e pour acc√©der aux templates et cr√©er des questionnaires.
class PrepaMathFormulaManager {
  /// =====================================================================================
  /// üìä ACC√àS AUX TEMPLATES
  /// =====================================================================================

  /// Templates pour les formules de bin√¥me de Newton
  static List<EnhancedFormulaTemplate> get binomeFormulas =>
      enhancedBinomeTemplates;

  /// Templates pour les formules de combinaisons
  static List<EnhancedFormulaTemplate> get combinaisonsFormulas =>
      enhancedCombinaisonsTemplates;

  /// Templates pour les formules de sommes
  static List<EnhancedFormulaTemplate> get sommesFormulas =>
      enhancedSommesTemplates;

  /// Tous les templates combin√©s
  static List<EnhancedFormulaTemplate> get allFormulas => [
        ...enhancedBinomeTemplates,
        ...enhancedCombinaisonsTemplates,
        ...enhancedSommesTemplates,
      ];

  /// =====================================================================================
  /// üéØ CR√âATION DE QUESTIONNAIRES
  /// =====================================================================================

  /// Cr√©e un preset pour les formules de bin√¥me
  static QuestionnairePreset createBinomePreset() {
    final latexFormulas =
        EnhancedFormulaPerturbationGenerator.generateLatexFormulas(
            enhancedBinomeTemplates);
    final descriptions =
        EnhancedFormulaPerturbationGenerator.generateDescriptions(
            enhancedBinomeTemplates);

    return QuestionnairePreset(
      id: 'prepa_math_binome_enhanced',
      nom: 'Calcul',
      titre: 'BIN√îME DE NEWTON - AVEC CALCUL AUTOMATIQUE',
      niveau: NiveauEducatif.prepa,
      categorie: CategorieMatiere.mathematiques,
      typeDeJeu: TypeDeJeu.formulairesLatex,
      sousTheme: 'Bin√¥me Newton avec calcul et perturbations',
      colonneGauche: latexFormulas,
      colonneDroite: descriptions,
    );
  }

  /// Cr√©e un preset pour les formules de combinaisons
  static QuestionnairePreset createCombinaisonsPreset() {
    final latexFormulas =
        EnhancedFormulaPerturbationGenerator.generateLatexFormulas(
            enhancedCombinaisonsTemplates);
    final descriptions =
        EnhancedFormulaPerturbationGenerator.generateDescriptions(
            enhancedCombinaisonsTemplates);

    return QuestionnairePreset(
      id: 'prepa_math_combinaisons_enhanced',
      nom: 'Calcul',
      titre: 'COMBINAISONS - AVEC CALCUL AUTOMATIQUE',
      niveau: NiveauEducatif.prepa,
      categorie: CategorieMatiere.mathematiques,
      typeDeJeu: TypeDeJeu.formulairesLatex,
      sousTheme: 'Analyse combinatoire avec calcul int√©gr√©',
      colonneGauche: latexFormulas,
      colonneDroite: descriptions,
    );
  }

  /// Cr√©e un preset pour les formules de sommes
  static QuestionnairePreset createSommesPreset() {
    final latexFormulas =
        EnhancedFormulaPerturbationGenerator.generateLatexFormulas(
            enhancedSommesTemplates);
    final descriptions =
        EnhancedFormulaPerturbationGenerator.generateDescriptions(
            enhancedSommesTemplates);

    return QuestionnairePreset(
      id: 'prepa_math_sommes_enhanced',
      nom: 'Calcul',
      titre: 'SOMMES - AVEC CALCUL AUTOMATIQUE',
      niveau: NiveauEducatif.prepa,
      categorie: CategorieMatiere.mathematiques,
      typeDeJeu: TypeDeJeu.formulairesLatex,
      sousTheme: 'Formules de sommes avec calcul int√©gr√©',
      colonneGauche: latexFormulas,
      colonneDroite: descriptions,
    );
  }

  /// Cr√©e un questionnaire unifi√© combinant toutes les cat√©gories de pr√©pa
  /// Utilise le syst√®me de codes quiz avec mode mixte par d√©faut (code 2)
  static QuestionnairePreset createUnifiedPrepaCalculPreset({QuizConfiguration? config}) {
    // Utiliser la configuration par d√©faut (mode mixte) si non sp√©cifi√©e
    final quizConfig = config ?? const QuizConfiguration();
    
    // G√©n√©rer le quiz selon la configuration
    final formulas = QuizGenerator.generateQuiz(quizConfig);
    
    print('üéÆ Quiz g√©n√©r√© avec mode: ${quizConfig.mode.nom} (code ${quizConfig.mode.code})');
    print('   ‚Ä¢ Formules s√©lectionn√©es: ${formulas.length}');
    print('   ‚Ä¢ Cat√©gories: ${quizConfig.categories}');

    // Cr√©er les listes pour le questionnaire
    final leftFormulas = formulas.map((f) => f.leftSide).toList();
    final rightFormulas = formulas.map((f) => f.rightSide).toList();

    return QuestionnairePreset(
      id: 'prepa_calcul_unified',
      nom: 'Calcul Pr√©pa',
      titre: 'CALCUL PR√âPA - ${quizConfig.mode.nom.toUpperCase()}',
      niveau: NiveauEducatif.prepa,
      categorie: CategorieMatiere.mathematiques,
      typeDeJeu: TypeDeJeu.formulairesLatex,
      sousTheme: '${quizConfig.mode.description} - ${formulas.length} formules',
      colonneGauche: leftFormulas,
      colonneDroite: rightFormulas,
      description:
          'Quiz ${quizConfig.mode.nom} combinant les formules de bin√¥me, sommes et combinaisons. '
          '${formulas.length} formules avec ${quizConfig.mode.description}.',
    );
  }
  
  /// Cr√©e un quiz avec un mode sp√©cifique
  static QuestionnairePreset createQuizWithMode(QuizMode mode) {
    final config = QuizConfiguration(mode: mode);
    return createUnifiedPrepaCalculPreset(config: config);
  }
  
  /// Cr√©e un quiz normal (mode 0)
  static QuestionnairePreset createNormalQuiz() {
    return createQuizWithMode(QuizMode.normal);
  }
  
  /// Cr√©e un quiz avec inversions (mode 1)
  static QuestionnairePreset createInversionQuiz() {
    return createQuizWithMode(QuizMode.inversion);
  }
  
  /// Cr√©e un quiz mixte (mode 2) - par d√©faut
  static QuestionnairePreset createMixteQuiz() {
    return createQuizWithMode(QuizMode.mixte);
  }

  /// =====================================================================================
  /// üîß UTILITAIRES ET VALIDATION
  /// =====================================================================================

  /// Valide tous les templates de formules
  static bool validateAllTemplates() {
    return EnhancedFormulaPerturbationGenerator.validateTemplates(allFormulas);
  }

  /// Obtient les formules par cat√©gorie
  static List<EnhancedFormulaTemplate> getFormulasByCategory(String category) {
    switch (category.toLowerCase()) {
      case 'binome':
      case 'binomial':
        return binomeFormulas;
      case 'combinaison':
      case 'combination':
      case 'combinaisons':
        return combinaisonsFormulas;
      case 'somme':
      case 'sum':
      case 'sommes':
        return sommesFormulas;
      default:
        return [];
    }
  }

  /// Recherche des formules par mots-cl√©s
  static List<EnhancedFormulaTemplate> searchFormulas(String keyword) {
    final lowerKeyword = keyword.toLowerCase();
    return allFormulas.where((template) {
      return template.description.toLowerCase().contains(lowerKeyword) ||
          template.latex.toLowerCase().contains(lowerKeyword);
    }).toList();
  }

  /// =====================================================================================
  /// üìä STATISTIQUES ET DIAGNOSTIC
  /// =====================================================================================

  /// Statistiques du syst√®me de formules pr√©pa
  static Map<String, dynamic> getStatistics() {
    return {
      'total_formulas': allFormulas.length,
      'binome_count': binomeFormulas.length,
      'combinaisons_count': combinaisonsFormulas.length,
      'sommes_count': sommesFormulas.length,
      'validation_status':
          validateAllTemplates() ? '‚úÖ Valide' : '‚ùå Erreurs d√©tect√©es',
      'last_updated': DateTime.now().toIso8601String(),
    };
  }

  /// Diagnostic complet du syst√®me
  static void printDiagnostic() {
    final stats = getStatistics();
    print('''
üßÆ DIAGNOSTIC - PrepaMathFormulaManager
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä Statistiques :
   ‚Ä¢ Total formules : ${stats['total_formulas']}
   ‚Ä¢ Bin√¥me : ${stats['binome_count']}
   ‚Ä¢ Combinaisons : ${stats['combinaisons_count']}
   ‚Ä¢ Sommes : ${stats['sommes_count']}

üîç √âtat : ${stats['validation_status']}
üìÖ Derni√®re mise √† jour : ${stats['last_updated']}

üìù M√©thodes disponibles :
   ‚Ä¢ getFormulasByCategory('binome'|'combinaisons'|'sommes')
   ‚Ä¢ searchFormulas('mot-cl√©')
   ‚Ä¢ createBinomePreset(), createCombinaisonsPreset(), createSommesPreset()
   ‚Ä¢ createUnifiedPrepaCalculPreset()
   ‚Ä¢ validateAllTemplates()
   ‚Ä¢ getStatistics(), printDiagnostic()

‚úÖ Syst√®me op√©rationnel !
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    ''');
  }
}

/// =====================================================================================
/// üéØ FONCTIONS DE COMPATIBILIT√â (LEGACY)
/// =====================================================================================

/// Fonctions de compatibilit√© pour maintenir l'ancien API
/// Ces fonctions utilisent maintenant le nouveau PrepaMathFormulaManager

QuestionnairePreset createEnhancedBinomePreset() =>
    PrepaMathFormulaManager.createBinomePreset();

QuestionnairePreset createEnhancedCombinaisonsPreset() =>
    PrepaMathFormulaManager.createCombinaisonsPreset();

QuestionnairePreset createEnhancedSommesPreset() =>
    PrepaMathFormulaManager.createSommesPreset();

QuestionnairePreset createUnifiedPrepaCalculPreset() =>
    PrepaMathFormulaManager.createUnifiedPrepaCalculPreset();

/// =====================================================================================
/// üìã STRUCTURES DE COMPATIBILIT√â √âDUCATIVE
/// =====================================================================================

/// Niveaux √©ducatifs fran√ßais
enum NiveauEducatif {
  primaire('Primaire', 'CP-CM2', 1),
  college('Coll√®ge', 'Brevet', 2),
  lycee('Lyc√©e', 'Baccalaur√©at', 3),
  prepa('Pr√©pa', 'CPGE', 4),
  superieur('Sup√©rieur', 'Licence+', 5);

  const NiveauEducatif(this.nom, this.diplome, this.ordre);
  final String nom;
  final String diplome;
  final int ordre; // Pour trier par difficult√©
}

/// Cat√©gories de mati√®res
enum CategorieMatiere {
  mathematiques('Math√©matiques', 'üßÆ'),
  francais('Fran√ßais', 'üìù'),
  anglais('Anglais', 'üá¨üáß'),
  histoire('Histoire', 'üèõÔ∏è'),
  geographie('G√©ographie', 'üåç'),
  sciences('Sciences', 'üî¨'),
  economie('√âconomie', 'üíº');

  const CategorieMatiere(this.nom, this.emoji);
  final String nom;
  final String emoji;
}

/// Types de jeux √©ducatifs possibles
enum TypeDeJeu {
  correspondanceVisAVis('Correspondance vis-√†-vis',
      'Associer chaque √©l√©ment de gauche avec son correspondant de droite'),
  ordreChronologique(
      'Ordre chronologique', 'Remettre les √©l√©ments dans l\'ordre temporel'),
  classementCroissant(
      'Classement croissant', 'Ordonner du plus petit au plus grand'),
  groupement('Groupement', 'Rassembler les √©l√©ments par cat√©gories'),
  sequenceLogique('S√©quence logique', 'Compl√©ter une suite logique'),
  combinaisonsMatematiques('Combinaisons math√©matiques',
      'Associer formules de combinaisons avec leurs r√©sultats'),
  formulairesLatex('Formulaires LaTeX',
      'Consultation de formules math√©matiques avec rendu LaTeX'),
  figuresDeStyle(
      'Figures de Style', 'Associer figures de style avec leurs exemples');

  const TypeDeJeu(this.nom, this.description);
  final String nom;
  final String description;
}

/// Structure compl√®te d'un questionnaire √©ducatif
class QuestionnairePreset {
  final String id;
  final String nom;
  final String titre; // Titre affich√© en haut de l'image
  final NiveauEducatif niveau;
  final CategorieMatiere categorie;
  final TypeDeJeu typeDeJeu; // Type de m√©canisme de jeu
  final List<String> colonneGauche;
  final List<String> colonneDroite;
  final String? description;
  final String? sousTheme; // Ex: "Analyse combinatoire", "Conjugaison"
  final double?
      ratioLargeurColonnes; // Ratio gauche/droite (ex: 0.75 = 75%/25%)

  const QuestionnairePreset({
    required this.id,
    required this.nom,
    required this.titre,
    required this.niveau,
    required this.categorie,
    required this.typeDeJeu,
    required this.colonneGauche,
    required this.colonneDroite,
    this.description,
    this.sousTheme,
    this.ratioLargeurColonnes, // null = 50%/50% par d√©faut
  });

  /// Conversion vers l'ancien format pour compatibilit√©
  EducationalPreset toEducationalPreset() {
    return EducationalPreset(
      id: id,
      name: nom,
      description: description ?? titre,
      leftColumn: colonneGauche,
      rightColumn: colonneDroite,
    );
  }
}

/// Preset √©ducatif (ancien format - gard√© pour compatibilit√©)
class EducationalPreset {
  final String id;
  final String name;
  final String description;
  final List<String> leftColumn;
  final List<String> rightColumn;

  const EducationalPreset({
    required this.id,
    required this.name,
    required this.description,
    required this.leftColumn,
    required this.rightColumn,
  });
}

/// =====================================================================================
/// üîó COMPATIBILIT√â AVEC LES AUTRES MODULES
/// =====================================================================================

// Note: Les imports suivants doivent √™tre ajout√©s dans les fichiers qui utilisent ce module
// import 'package:luchy/core/formulas/prepa_math_engine.dart';

// Les classes suivantes sont export√©es pour utilisation dans d'autres modules:
// - ParameterType
// - FormulaType
// - FormulaParameter
// - EnhancedFormulaTemplate
// - FormulaVariant
// - EnhancedFormulaPerturbationGenerator
// - enhancedBinomeTemplates
// - enhancedCombinaisonsTemplates
// - enhancedSommesTemplates
// - NiveauEducatif
// - CategorieMatiere
// - TypeDeJeu
// - QuestionnairePreset
// - EducationalPreset

// Fonctions export√©es:
// - createEnhancedBinomePreset()
// - createEnhancedCombinaisonsPreset()
// - createEnhancedSommesPreset()
// - createUnifiedPrepaCalculPreset()
// - testEnhancedCalculations()
// - validateEnhancedTemplates()
