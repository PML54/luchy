/// <cursor>
///
/// MOTEUR D'OP√âRATIONS NUM√âRIQUES
///
/// G√©n√©rateur d'op√©rations math√©matiques de base pour les quiz √©ducatifs.
/// Cr√©e des op√©rations vari√©es avec r√©sultats entiers pour l'apprentissage.
///
/// COMPOSANTS PRINCIPAUX:
/// - NumericalOperationTemplate: Structure des op√©rations
/// - OperationsQuizGenerator: G√©n√©rateur de quiz
/// - Types d'op√©rations: Carr√©s, racines, fractions, combinaisons, etc.
/// - Validation: Syst√®me de validation des r√©sultats
/// - Niveaux de difficult√©: Support enum NiveauDifficulte
///
/// √âTAT ACTUEL:
/// - 15+ types d'op√©rations math√©matiques
/// - G√©n√©ration al√©atoire avec param√®tres configurables
/// - Support LaTeX pour affichage des op√©rations
/// - Syst√®me de difficult√© int√©gr√© (1-5)
/// - Support niveaux de difficult√© (Facile, Moyen, Difficile)
///
/// HISTORIQUE R√âCENT:
/// - 2025-01-27: R√âVOLUTION - Support 14 niveaux √©ducatifs fran√ßais
/// - M√©thode generateQuizByNiveauEducatif() avec adaptation par cycle
/// - Primaire: op√©rations de base (1-200), 4 questions
/// - Coll√®ge: op√©rations moyennes (1-100), 6 questions
/// - Lyc√©e: op√©rations avanc√©es (1-500), 6 questions
/// - Sup√©rieur: toutes op√©rations (1-1000), 8 questions
/// - Adaptation automatique des plages de nombres par niveau
/// - 2025-01-27: NOUVEAU - Support niveaux de difficult√© pour quizz
/// - 2025-01-27: Refonte compl√®te de l'architecture
/// - Ajout de nouveaux types d'op√©rations
/// - Am√©lioration du syst√®me de g√©n√©ration
/// - Int√©gration avec l'interface utilisateur
///
/// üîß POINTS D'ATTENTION:
/// - Gestion des d√©bordements num√©riques
/// - Validation des r√©sultats uniques
/// - Performance avec grandes quantit√©s d'op√©rations
/// - Coh√©rence des param√®tres LaTeX
/// - Adaptation fine par niveau √©ducatif (CP √† Bac+2)
///
/// üöÄ PROCHAINES √âTAPES:
/// - Impl√©menter syst√®me d'estimation automatique
/// - Ajouter plus de types d'op√©rations par niveau
/// - Optimiser les performances
/// - Ajouter statistiques par niveau √©ducatif
///
/// üîó FICHIERS LI√âS:
/// - lib/features/puzzle/presentation/screens/numerical_skills_screen.dart: Interface
/// - lib/core/operations/base_skills_engine.dart: Classe de base
/// - lib/features/puzzle/domain/models/game_state.dart: NiveauEducatif
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê (4/5 √©toiles)
/// üìÖ Derni√®re modification: 2025-01-27 23:15
/// </cursor>

import 'dart:math' as math;

import 'package:luchy/features/puzzle/domain/models/game_state.dart';

import 'base_skills_engine.dart';

/// Param√®tre d'op√©ration pour les comp√©tences num√©riques
class NumericalOperationParameter extends BaseOperationParameter {
  const NumericalOperationParameter({
    required String name,
    required int minValue,
    required int maxValue,
    required String description,
  }) : super(
          name: name,
          minValue: minValue,
          maxValue: maxValue,
          description: description,
        );
}

/// Template d'op√©ration pour les comp√©tences num√©riques
class NumericalOperationTemplate extends BaseOperationTemplate {
  final Function(Map<String, int>) _calculateResult;

  const NumericalOperationTemplate({
    required String operationType,
    required String latexPattern,
    required String description,
    required List<NumericalOperationParameter> parameters,
    required int difficulty,
    required Function(Map<String, int>) calculateResult,
  })  : _calculateResult = calculateResult,
        super(
          operationType: operationType,
          latexPattern: latexPattern,
          description: description,
          parameters: parameters,
          difficulty: difficulty,
        );

  @override
  dynamic calculateResult(Map<String, dynamic> params) {
    // Convertir les param√®tres en int pour la compatibilit√©
    final intParams = <String, int>{};
    for (final entry in params.entries) {
      intParams[entry.key] =
          entry.value is int ? entry.value : int.parse(entry.value.toString());
    }
    return _calculateResult(intParams);
  }
}

/// Liste compl√®te des op√©rations math√©matiques support√©es
final List<NumericalOperationTemplate> allOperations = [
  // 1. CARR√âS
  NumericalOperationTemplate(
    operationType: 'carre',
    latexPattern: '{VAR:n}^2',
    description: 'Carr√© de n',
    parameters: [
      NumericalOperationParameter(
          name: 'n',
          minValue: 1,
          maxValue: 20,
          description: 'Nombre √† √©lever au carr√©'),
    ],
    difficulty: 1,
    calculateResult: (params) => params['n']! * params['n']!,
  ),

  // 2. RACINES CARR√âES (nombres parfaits uniquement)
  NumericalOperationTemplate(
    operationType: 'racine',
    latexPattern: '\\sqrt{{VAR:n}}',
    description: 'Racine carr√©e de n',
    parameters: [
      NumericalOperationParameter(
          name: 'n', minValue: 4, maxValue: 400, description: 'Carr√© parfait'),
    ],
    difficulty: 2,
    calculateResult: (params) => math.sqrt(params['n']!).toInt(),
  ),

  // 3. CUBES
  NumericalOperationTemplate(
    operationType: 'cube',
    latexPattern: '{VAR:n}^3',
    description: 'Cube de n',
    parameters: [
      NumericalOperationParameter(
          name: 'n',
          minValue: 1,
          maxValue: 10,
          description: 'Nombre √† √©lever au cube'),
    ],
    difficulty: 2,
    calculateResult: (params) => params['n']! * params['n']! * params['n']!,
  ),

  // 4. PRODUITS
  NumericalOperationTemplate(
    operationType: 'produit',
    latexPattern: '{VAR:a} \\times {VAR:b}',
    description: 'Produit de a et b',
    parameters: [
      NumericalOperationParameter(
          name: 'a', minValue: 2, maxValue: 20, description: 'Premier facteur'),
      NumericalOperationParameter(
          name: 'b',
          minValue: 2,
          maxValue: 20,
          description: 'Deuxi√®me facteur'),
    ],
    difficulty: 1,
    calculateResult: (params) => params['a']! * params['b']!,
  ),

  // 5. FRACTIONS SIMPLES (r√©sultat entier garanti)
  NumericalOperationTemplate(
    operationType: 'fraction',
    latexPattern: '\\frac{{{VAR:a}}}{{{VAR:b}}}',
    description: 'Fraction a sur b',
    parameters: [
      NumericalOperationParameter(
          name: 'a', minValue: 2, maxValue: 40, description: 'Num√©rateur'),
      NumericalOperationParameter(
          name: 'b', minValue: 1, maxValue: 10, description: 'D√©nominateur'),
    ],
    difficulty: 2,
    calculateResult: (params) {
      final a = params['a']!;
      final b = params['b']!;
      // S'assurer que la division donne un r√©sultat entier
      return a ~/ b;
    },
  ),

  // 6. SOMMES
  NumericalOperationTemplate(
    operationType: 'somme',
    latexPattern: '{VAR:a} + {VAR:b}',
    description: 'Somme de a et b',
    parameters: [
      NumericalOperationParameter(
          name: 'a', minValue: 1, maxValue: 50, description: 'Premier terme'),
      NumericalOperationParameter(
          name: 'b', minValue: 1, maxValue: 50, description: 'Deuxi√®me terme'),
    ],
    difficulty: 1,
    calculateResult: (params) => params['a']! + params['b']!,
  ),

  // 7. SOUSTRACTIONS
  NumericalOperationTemplate(
    operationType: 'soustraction',
    latexPattern: '{VAR:a} - {VAR:b}',
    description: 'Diff√©rence de a et b',
    parameters: [
      NumericalOperationParameter(
          name: 'a', minValue: 10, maxValue: 100, description: 'Minuende'),
      NumericalOperationParameter(
          name: 'b', minValue: 1, maxValue: 50, description: 'Soustrahend'),
    ],
    difficulty: 1,
    calculateResult: (params) => params['a']! - params['b']!,
  ),

  // 8. FACTORIELS
  NumericalOperationTemplate(
    operationType: 'factoriel',
    latexPattern: '{VAR:n}!',
    description: 'Factoriel de n',
    parameters: [
      NumericalOperationParameter(
          name: 'n', minValue: 1, maxValue: 6, description: 'Nombre factoriel'),
    ],
    difficulty: 3,
    calculateResult: (params) {
      int n = params['n']!;
      int result = 1;
      for (int i = 1; i <= n; i++) {
        result *= i;
      }
      return result;
    },
  ),

  // 9. SOMME DE FRACTIONS (r√©sultat entier garanti)
  NumericalOperationTemplate(
    operationType: 'somme_fractions',
    latexPattern: '\\frac{{{VAR:a}}}{{{VAR:b}}} + \\frac{{{VAR:c}}}{{{VAR:d}}}',
    description: 'Somme de deux fractions',
    parameters: [
      NumericalOperationParameter(
          name: 'a', minValue: 1, maxValue: 10, description: 'Num√©rateur 1'),
      NumericalOperationParameter(
          name: 'b', minValue: 2, maxValue: 10, description: 'D√©nominateur 1'),
      NumericalOperationParameter(
          name: 'c', minValue: 1, maxValue: 10, description: 'Num√©rateur 2'),
      NumericalOperationParameter(
          name: 'd', minValue: 2, maxValue: 10, description: 'D√©nominateur 2'),
    ],
    difficulty: 4,
    calculateResult: (params) {
      int a = params['a']!;
      int b = params['b']!;
      int c = params['c']!;
      int d = params['d']!;
      // Calcul: (a*d + c*b) / (b*d)
      int numerateur = a * d + c * b;
      int denominateur = b * d;

      // V√©rifier que la division est exacte
      if (numerateur % denominateur != 0) {
        // Si ce n'est pas exact, ajuster pour garantir un r√©sultat entier
        // On prend le quotient entier et on ajuste les param√®tres
        return numerateur ~/ denominateur;
      }

      return numerateur ~/ denominateur;
    },
  ),

  // 10. PRODUIT DE FRACTIONS (r√©sultat entier garanti)
  NumericalOperationTemplate(
    operationType: 'produit_fractions',
    latexPattern:
        '\\frac{{{VAR:a}}}{{{VAR:b}}} \\times \\frac{{{VAR:c}}}{{{VAR:d}}}',
    description: 'Produit de deux fractions',
    parameters: [
      NumericalOperationParameter(
          name: 'a', minValue: 1, maxValue: 20, description: 'Num√©rateur 1'),
      NumericalOperationParameter(
          name: 'b', minValue: 2, maxValue: 10, description: 'D√©nominateur 1'),
      NumericalOperationParameter(
          name: 'c', minValue: 1, maxValue: 20, description: 'Num√©rateur 2'),
      NumericalOperationParameter(
          name: 'd', minValue: 2, maxValue: 10, description: 'D√©nominateur 2'),
    ],
    difficulty: 3,
    calculateResult: (params) {
      int a = params['a']!;
      int b = params['b']!;
      int c = params['c']!;
      int d = params['d']!;
      // Calcul: (a*c) / (b*d)
      int numerateur = a * c;
      int denominateur = b * d;
      return numerateur ~/ denominateur; // Division enti√®re
    },
  ),

  // 11. COMBINAISONS
  NumericalOperationTemplate(
    operationType: 'combinaison',
    latexPattern: '\\binom{{{VAR:n}}}{{{VAR:p}}}',
    description: 'Combinaison de p √©l√©ments parmi n',
    parameters: [
      NumericalOperationParameter(
          name: 'n', minValue: 3, maxValue: 8, description: 'Nombre total'),
      NumericalOperationParameter(
          name: 'p', minValue: 2, maxValue: 6, description: 'Nombre choisi'),
    ],
    difficulty: 4,
    calculateResult: (params) {
      int n = params['n']!;
      int p = params['p']!;
      if (p > n) return 0;
      if (p == 0 || p == n) return 1;
      if (p > n - p) p = n - p; // Optimisation
      int result = 1;
      for (int i = 0; i < p; i++) {
        result = result * (n - i) ~/ (i + 1);
      }
      return result;
    },
  ),

  // 12. PUISSANCES
  NumericalOperationTemplate(
    operationType: 'puissance',
    latexPattern: '{VAR:a}^{{{VAR:n}}}',
    description: 'a puissance n',
    parameters: [
      NumericalOperationParameter(
          name: 'a', minValue: 2, maxValue: 10, description: 'Base'),
      NumericalOperationParameter(
          name: 'n', minValue: 2, maxValue: 6, description: 'Exposant'),
    ],
    difficulty: 3,
    calculateResult: (params) => math.pow(params['a']!, params['n']!).toInt(),
  ),
];

/// G√©n√©rateur de quiz d'op√©rations math√©matiques
class OperationsQuizGenerator extends BaseSkillsGenerator {
  /// Trouve tous les facteurs d'un nombre
  static List<int> _findFactors(int n) {
    final factors = <int>[];
    for (int i = 1; i <= n; i++) {
      if (n % i == 0) {
        factors.add(i);
      }
    }
    return factors;
  }

  /// G√©n√®re un carr√© parfait pour les racines carr√©es
  static Map<String, int> _generatePerfectSquare(math.Random random) {
    // G√©n√©rer un nombre de base entre 2 et 20
    final base = 2 + random.nextInt(19); // 2 √† 20
    final square = base * base; // Son carr√©

    return {'n': square}; // n sera le carr√© parfait
  }

  /// G√©n√®re une somme de fractions qui donne un r√©sultat entier exact
  static Map<String, int> _generateExactFractionSum(math.Random random) {
    // G√©n√©rer un r√©sultat entier al√©atoire entre 1 et 10
    final targetResult = 1 + random.nextInt(10);

    // G√©n√©rer des d√©nominateurs al√©atoires entre 2 et 8
    final b = 2 + random.nextInt(7); // 2 √† 8
    final d = 2 + random.nextInt(7); // 2 √† 8

    // Calculer le PPCM des d√©nominateurs
    final ppcm = (b * d) ~/ _gcd(b, d);

    // Calculer les num√©rateurs pour que la somme donne targetResult
    final a = (targetResult * ppcm) ~/ b;
    final c = (targetResult * ppcm) ~/ d;

    // V√©rifier que le calcul est exact
    final numerateur = a * d + c * b;
    final denominateur = b * d;

    // Si ce n'est pas exact, ajuster pour garantir un r√©sultat entier
    if (numerateur % denominateur != 0) {
      // Ajuster c pour que la division soit exacte
      final newC = (targetResult * denominateur - a * d) ~/ b;
      return {'a': a, 'b': b, 'c': newC, 'd': d};
    }

    return {'a': a, 'b': b, 'c': c, 'd': d};
  }

  /// Calcule le PGCD de deux nombres
  static int _gcd(int a, int b) {
    while (b != 0) {
      final temp = b;
      b = a % b;
      a = temp;
    }
    return a;
  }

  /// G√©n√®re un produit de fractions qui donne un r√©sultat entier exact
  static Map<String, int> _generateExactFractionProduct(math.Random random) {
    // G√©n√©rer un r√©sultat entier al√©atoire entre 2 et 20
    final targetResult = 2 + random.nextInt(19);

    // Trouver deux facteurs de targetResult
    final factors = _findFactors(targetResult);
    if (factors.isEmpty) {
      // Fallback simple
      return {'a': 4, 'b': 2, 'c': 6, 'd': 3}; // 4/2 * 6/3 = 2 * 2 = 4
    }

    // factor1 = factors[random.nextInt(factors.length)]; // Pas utilis√© dans cette impl√©mentation
    // factor2 = targetResult ~/ factor1; // Pas utilis√© dans cette impl√©mentation

    // G√©n√©rer des fractions qui donnent ces facteurs
    // factor1 = a/b, factor2 = c/d
    // On veut (a*c)/(b*d) = targetResult
    // Donc a*c = targetResult * b*d

    final b = 2 + random.nextInt(8); // 2-9
    final d = 2 + random.nextInt(8); // 2-9

    // Calculer a et c pour que a*c = targetResult * b*d
    final product = targetResult * b * d;
    final factorsProduct = _findFactors(product);
    if (factorsProduct.isEmpty) {
      // Fallback simple
      return {'a': 4, 'b': 2, 'c': 6, 'd': 3};
    }

    final a = factorsProduct[random.nextInt(factorsProduct.length)];
    final c = product ~/ a;

    return {'a': a, 'b': b, 'c': c, 'd': d};
  }

  /// G√©n√®re un quiz de 6 op√©rations avec r√©sultats entiers uniquement
  static List<Map<String, dynamic>> generateQuiz() {
    return generateIntegerQuiz(6);
  }

  /// G√©n√®re un quiz d'op√©rations enti√®res uniquement
  static List<Map<String, dynamic>> generateIntegerQuiz(int numberOfQuestions) {
    final random = math.Random();
    final selectedOperations = <NumericalOperationTemplate>[];
    final usedResults = <int>{};

    // Filtrer les op√©rations pour ne garder que celles donnant des r√©sultats entiers
    final integerOperations = allOperations
        .where((op) =>
            op.operationType != 'produit_fractions' &&
            op.operationType != 'somme_fractions' &&
            op.operationType != 'fraction' &&
            op.operationType != 'quotient_fractions' &&
            op.operationType != 'difference_fractions')
        .toList();

    // S√©lectionner les op√©rations diff√©rentes
    while (selectedOperations.length < numberOfQuestions) {
      final operation =
          integerOperations[random.nextInt(integerOperations.length)];
      if (!selectedOperations
          .any((op) => op.operationType == operation.operationType)) {
        selectedOperations.add(operation);
      }
    }

    // G√©n√©rer les questions
    final questions = <Map<String, dynamic>>[];

    for (final operation in selectedOperations) {
      Map<String, int> params = {};
      int result;
      int attempts = 0;
      const maxAttempts = 50; // Limite pour √©viter les boucles infinies

      // G√©n√©rer des param√®tres jusqu'√† obtenir un r√©sultat unique et valide
      do {
        params = {};

        // Pour les produits de fractions, utiliser la m√©thode sp√©cialis√©e
        if (operation.operationType == 'produit_fractions') {
          params = _generateExactFractionProduct(random);
        } else if (operation.operationType == 'somme_fractions') {
          // Pour les sommes de fractions, g√©n√©rer un r√©sultat entier exact
          params = _generateExactFractionSum(random);
        } else if (operation.operationType == 'racine') {
          // Pour les racines carr√©es, g√©n√©rer un carr√© parfait
          params = _generatePerfectSquare(random);
        } else {
          // Pour les autres op√©rations, g√©n√©ration normale
          for (final param in operation.parameters) {
            params[param.name] = param.minValue +
                random.nextInt(param.maxValue - param.minValue + 1);
          }
        }

        result = operation.calculateResult(params);
        attempts++;

        // Pour les fractions simples, v√©rifier que le r√©sultat est exact
        if (operation.operationType == 'fraction') {
          final a = params['a']!;
          final b = params['b']!;
          if (a % b != 0) {
            // La division n'est pas exacte, essayer avec un multiple de b
            params['a'] = b * (a ~/ b + 1);
            result = operation.calculateResult(params);
          }
        }
      } while ((usedResults.contains(result) || result <= 0) &&
          attempts < maxAttempts);

      // Si on n'a pas trouv√© de r√©sultat valide, utiliser une op√©ration simple
      if (attempts >= maxAttempts) {
        final simpleOperation = allOperations.firstWhere(
          (op) => op.operationType == 'carre',
          orElse: () => allOperations.first,
        );
        params = {'n': 2 + random.nextInt(10)};
        result = simpleOperation.calculateResult(params);
      }

      usedResults.add(result);

      // Remplacer les variables dans le LaTeX
      String latex = operation.latexPattern;
      for (final entry in params.entries) {
        latex = latex.replaceAll('{VAR:${entry.key}}', entry.value.toString());
      }

      questions.add({
        'operation': operation,
        'latex': latex,
        'result': result,
        'params': params,
      });
    }

    return questions;
  }

  /// G√©n√®re un quiz avec un niveau de difficult√© sp√©cifique
  static List<Map<String, dynamic>> generateQuizByDifficulty(int difficulty) {
    final operations =
        allOperations.where((op) => op.difficulty == difficulty).toList();
    if (operations.isEmpty) {
      return generateQuiz(); // Fallback sur toutes les op√©rations
    }

    final random = math.Random();
    final selectedOperations = <NumericalOperationTemplate>[];
    final usedResults = <int>{};

    // S√©lectionner 6 op√©rations du niveau demand√©
    while (selectedOperations.length < 6 &&
        selectedOperations.length < operations.length) {
      final operation = operations[random.nextInt(operations.length)];
      if (!selectedOperations
          .any((op) => op.operationType == operation.operationType)) {
        selectedOperations.add(operation);
      }
    }

    // Compl√©ter avec d'autres op√©rations si n√©cessaire
    while (selectedOperations.length < 6) {
      final operation = allOperations[random.nextInt(allOperations.length)];
      if (!selectedOperations
          .any((op) => op.operationType == operation.operationType)) {
        selectedOperations.add(operation);
      }
    }

    // G√©n√©rer les questions (m√™me logique que generateQuiz)
    final questions = <Map<String, dynamic>>[];

    for (final operation in selectedOperations) {
      Map<String, int> params = {};
      int result;
      int attempts = 0;
      const maxAttempts = 50; // Limite pour √©viter les boucles infinies

      // G√©n√©rer des param√®tres jusqu'√† obtenir un r√©sultat unique et valide
      do {
        params = {};

        // Pour les produits de fractions, utiliser la m√©thode sp√©cialis√©e
        if (operation.operationType == 'produit_fractions') {
          params = _generateExactFractionProduct(random);
        } else if (operation.operationType == 'somme_fractions') {
          // Pour les sommes de fractions, g√©n√©rer un r√©sultat entier exact
          params = _generateExactFractionSum(random);
        } else if (operation.operationType == 'racine') {
          // Pour les racines carr√©es, g√©n√©rer un carr√© parfait
          params = _generatePerfectSquare(random);
        } else {
          // Pour les autres op√©rations, g√©n√©ration normale
          for (final param in operation.parameters) {
            params[param.name] = param.minValue +
                random.nextInt(param.maxValue - param.minValue + 1);
          }
        }

        result = operation.calculateResult(params);
        attempts++;

        // Pour les fractions simples, v√©rifier que le r√©sultat est exact
        if (operation.operationType == 'fraction') {
          final a = params['a']!;
          final b = params['b']!;
          if (a % b != 0) {
            // La division n'est pas exacte, essayer avec un multiple de b
            params['a'] = b * (a ~/ b + 1);
            result = operation.calculateResult(params);
          }
        }
      } while ((usedResults.contains(result) || result <= 0) &&
          attempts < maxAttempts);

      // Si on n'a pas trouv√© de r√©sultat valide, utiliser une op√©ration simple
      if (attempts >= maxAttempts) {
        final simpleOperation = allOperations.firstWhere(
          (op) => op.operationType == 'carre',
          orElse: () => allOperations.first,
        );
        params = {'n': 2 + random.nextInt(10)};
        result = simpleOperation.calculateResult(params);
      }

      usedResults.add(result);

      String latex = operation.latexPattern;
      for (final entry in params.entries) {
        latex = latex.replaceAll('{VAR:${entry.key}}', entry.value.toString());
      }

      questions.add({
        'operation': operation,
        'latex': latex,
        'result': result,
        'params': params,
      });
    }

    return questions;
  }

  /// G√©n√®re un quiz adapt√© au niveau de difficult√©
  static List<Map<String, dynamic>> generateAdaptiveQuiz(
      NiveauDifficulte niveau) {
    final random = math.Random();
    final questions = <Map<String, dynamic>>[];

    // Filtrer les op√©rations pour ne garder que celles donnant des r√©sultats entiers
    final integerOperations = allOperations
        .where((op) =>
            op.operationType != 'produit_fractions' &&
            op.operationType != 'somme_fractions' &&
            op.operationType != 'fraction' &&
            op.operationType != 'quotient_fractions' &&
            op.operationType != 'difference_fractions')
        .toList();

    // S√©lectionner les op√©rations selon le niveau √©ducatif
    List<NumericalOperationTemplate> operations;
    int nombreQuestions;

    // S√©lectionner les op√©rations selon le niveau
    switch (niveau) {
      case NiveauDifficulte.facile:
        operations =
            integerOperations.where((op) => op.difficulty <= 2).toList();
        nombreQuestions = 4; // Moins de questions pour commencer
        break;
      case NiveauDifficulte.moyen:
        operations = integerOperations
            .where((op) => op.difficulty >= 2 && op.difficulty <= 4)
            .toList();
        nombreQuestions = 6; // Nombre standard
        break;
      case NiveauDifficulte.difficile:
        operations =
            integerOperations.where((op) => op.difficulty >= 3).toList();
        nombreQuestions = 6; // Maximum 6 questions
        break;
    }

    if (operations.isEmpty) {
      operations = integerOperations; // Fallback sur les op√©rations enti√®res
    }

    final selectedOperations = <NumericalOperationTemplate>[];
    final usedResults = <int>{};

    // S√©lectionner les op√©rations
    while (selectedOperations.length < nombreQuestions &&
        selectedOperations.length < operations.length) {
      final operation = operations[random.nextInt(operations.length)];
      if (!selectedOperations
          .any((op) => op.operationType == operation.operationType)) {
        selectedOperations.add(operation);
      }
    }

    // Compl√©ter si n√©cessaire
    while (selectedOperations.length < nombreQuestions) {
      final operation = allOperations[random.nextInt(allOperations.length)];
      if (!selectedOperations
          .any((op) => op.operationType == operation.operationType)) {
        selectedOperations.add(operation);
      }
    }

    // G√©n√©rer les questions
    for (final operation in selectedOperations) {
      Map<String, int> params = {};
      int result;
      int attempts = 0;
      const maxAttempts = 50;

      do {
        params = {};

        if (operation.operationType == 'racine') {
          params = _generatePerfectSquare(random);
        } else {
          for (final param in operation.parameters) {
            params[param.name] = param.minValue +
                random.nextInt(param.maxValue - param.minValue + 1);
          }
        }

        result = operation.calculateResult(params);
        attempts++;
      } while ((usedResults.contains(result) || result < 0) &&
          attempts < maxAttempts);

      if (attempts >= maxAttempts) {
        // Si on n'arrive pas √† g√©n√©rer un r√©sultat unique, on continue quand m√™me
        usedResults.add(result);
      } else {
        usedResults.add(result);
      }

      // G√©n√©rer LaTeX
      String latex = operation.latexPattern;
      for (final entry in params.entries) {
        latex = latex.replaceAll('{VAR:${entry.key}}', entry.value.toString());
      }

      questions.add({
        'operation': operation,
        'latex': latex,
        'result': result,
        'params': params,
        'difficulty': niveau.nom, // Ajouter le niveau pour l'affichage
      });
    }

    return questions;
  }
}
