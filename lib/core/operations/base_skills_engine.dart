/// <cursor>
///
/// MOTEUR DE BASE POUR LES QUIZ HABILET√â
///
/// Classe de base commune pour tous les quiz "Habilet√©" (Num√©rique, Fractions, etc.).
/// D√©finit la structure commune et les interfaces partag√©es.
///
/// COMPOSANTS PRINCIPAUX:
/// - BaseOperationParameter: Param√®tre d'op√©ration g√©n√©rique
/// - BaseOperationTemplate: Template d'op√©ration g√©n√©rique
/// - BaseSkillsGenerator: G√©n√©rateur de base
/// - Interfaces communes pour tous les quiz
///
/// √âTAT ACTUEL:
/// - Structure de base d√©finie
/// - Interfaces communes cr√©√©es
/// - Pr√™t pour l'h√©ritage par les moteurs sp√©cialis√©s
///
/// HISTORIQUE R√âCENT:
/// - 2025-01-27: Cr√©ation de la base commune
/// - D√©finition des interfaces partag√©es
/// - Structure pour l'h√©ritage
///
/// üîß POINTS D'ATTENTION:
/// - G√©n√©ricit√© pour supporter diff√©rents types de donn√©es
/// - Interfaces communes pour la coh√©rence
/// - Extensibilit√© pour de nouveaux quiz
///
/// üöÄ PROCHAINES √âTAPES:
/// - Refactoring des moteurs existants
/// - Cr√©ation d'√©crans de base communs
/// - Tests d'int√©gration
///
/// üîó FICHIERS LI√âS:
/// - lib/core/operations/numerical_skills_engine.dart: Moteur num√©rique
/// - lib/core/operations/fraction_skills_engine.dart: Moteur fractions
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5/5 √©toiles)
/// üìÖ Derni√®re modification: 2025-01-27
/// </cursor>

import 'dart:math' as math;

/// Param√®tre d'op√©ration g√©n√©rique
class BaseOperationParameter {
  final String name;
  final int minValue;
  final int maxValue;
  final String description;

  const BaseOperationParameter({
    required this.name,
    required this.minValue,
    required this.maxValue,
    required this.description,
  });
}

/// Template d'op√©ration g√©n√©rique
abstract class BaseOperationTemplate {
  final String operationType;
  final String latexPattern;
  final String description;
  final List<BaseOperationParameter> parameters;
  final int difficulty;

  const BaseOperationTemplate({
    required this.operationType,
    required this.latexPattern,
    required this.description,
    required this.parameters,
    required this.difficulty,
  });

  /// Calcule le r√©sultat de l'op√©ration
  dynamic calculateResult(Map<String, dynamic> params);
}

/// G√©n√©rateur de base pour les quiz
class BaseSkillsGenerator {
  static final math.Random _random = math.Random();

  /// G√©n√®re un quiz avec des op√©rations
  static List<Map<String, dynamic>>
      generateQuiz<T extends BaseOperationTemplate>(
    List<T> operations,
    int numberOfQuestions,
  ) {
    final selectedOperations = <T>[];
    final usedResults = <String>{};

    // S√©lectionner des op√©rations diff√©rentes
    while (selectedOperations.length < numberOfQuestions) {
      final operation = operations[_random.nextInt(operations.length)];
      if (!selectedOperations
          .any((op) => op.operationType == operation.operationType)) {
        selectedOperations.add(operation);
      }
    }

    // G√©n√©rer les questions
    final questions = <Map<String, dynamic>>[];

    for (final operation in selectedOperations) {
      Map<String, dynamic> params = {};
      dynamic result;
      int attempts = 0;
      const maxAttempts = 50;

      // G√©n√©rer des param√®tres jusqu'√† obtenir un r√©sultat unique et valide
      do {
        params = {};

        // G√©n√©ration des param√®tres
        for (final param in operation.parameters) {
          params[param.name] = param.minValue +
              _random.nextInt(param.maxValue - param.minValue + 1);
        }

        result = operation.calculateResult(params);
        attempts++;
      } while ((usedResults.contains(result.toString()) || result == null) &&
          attempts < maxAttempts);

      usedResults.add(result.toString());

      // Remplacer les variables dans le LaTeX
      String latex = operation.latexPattern;
      for (final entry in params.entries) {
        latex = latex.replaceAll('{VAR:${entry.key}}', entry.value.toString());
      }

      questions.add({
        'operation': operation,
        'latex': latex,
        'result': result,
        'params': params,
      });
    }

    return questions;
  }
}
