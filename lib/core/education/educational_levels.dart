/// <cursor>
///
/// SYST√àME DE NIVEAUX √âDUCATIFS FRAN√áAIS
///
/// D√©finit les 14 niveaux √©ducatifs du syst√®me fran√ßais (CP √† Pr√©pa+2).
/// Chaque niveau correspond √† une classe sp√©cifique avec ses caract√©ristiques.
/// Structure compatible avec le syst√®me de puzzle et LaTeX existant.
///
/// COMPOSANTS PRINCIPAUX:
/// - EducationalLevel: Classe principale pour chaque niveau
/// - ValueRange: Intervalles de valeurs pour les param√®tres
/// - Cycle: Classification par cycle √©ducatif
/// - NiveauEducatif: Enum des 14 niveaux
///
/// √âTAT ACTUEL:
/// - 14 niveaux d√©finis (CP √† Pr√©pa+2)
/// - Classification par cycles (Primaire, Coll√®ge, Lyc√©e, Sup√©rieur)
/// - Intervalles de valeurs par param√®tre
/// - Couleurs et ic√¥nes distinctives
///
/// HISTORIQUE R√âCENT:
/// - 2025-01-27: NOUVEAU - Cr√©ation du syst√®me de 14 niveaux √©ducatifs
/// - Structure compatible avec le syst√®me existant
/// - Intervalles de valeurs configurables par niveau
///
/// üîß POINTS D'ATTENTION:
/// - Compatibilit√© avec le syst√®me LaTeX existant
/// - Intervalles de valeurs adapt√©s √† chaque niveau
/// - Progression logique des difficult√©s
/// - Support des op√©rations complexes selon le niveau
///
/// üöÄ PROCHAINES √âTAPES:
/// - Int√©gration avec les moteurs de quiz existants
/// - Migration des formules vers le nouveau syst√®me
/// - Ajout de la logique de g√©n√©ration par niveau
/// - Tests sur tous les niveaux
///
/// üîó FICHIERS LI√âS:
/// - lib/features/puzzle/domain/models/game_state.dart: NiveauDifficulte actuel
/// - lib/core/operations/numerical_skills_engine.dart: Moteur de quiz
/// - lib/core/operations/fraction_skills_engine.dart: Moteur de fractions
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5/5 √©toiles)
/// üìÖ Derni√®re modification: 2025-01-27
/// </cursor>

import 'package:flutter/material.dart';
import 'dart:math' as math;

/// Intervalle de valeurs pour un param√®tre de formule
class ValueRange {
  final int min;
  final int max;
  final bool allowDecimals;
  final List<int>? preferredValues; // Valeurs pr√©f√©r√©es (optionnel)
  final String description; // Description de l'intervalle

  const ValueRange({
    required this.min,
    required this.max,
    this.allowDecimals = false,
    this.preferredValues,
    this.description = '',
  });

  /// G√©n√®re une valeur al√©atoire dans l'intervalle
  int generateRandomValue(math.Random random) {
    if (preferredValues != null && preferredValues!.isNotEmpty) {
      return preferredValues![random.nextInt(preferredValues!.length)];
    }
    return min + random.nextInt(max - min + 1);
  }

  /// V√©rifie si une valeur est dans l'intervalle
  bool contains(int value) {
    return value >= min && value <= max;
  }

  @override
  String toString() {
    return 'ValueRange($min-$max${allowDecimals ? ', decimals' : ''})';
  }
}

/// Cycle √©ducatif fran√ßais
enum CycleEducatif {
  primaire('Primaire', '√âcole primaire', Colors.green, Icons.child_care),
  college('Coll√®ge', 'Coll√®ge', Colors.blue, Icons.school),
  lycee('Lyc√©e', 'Lyc√©e', Colors.orange, Icons.school_outlined),
  superieur('Sup√©rieur', 'Enseignement sup√©rieur', Colors.purple, Icons.military_tech);

  const CycleEducatif(this.nom, this.description, this.couleur, this.icone);
  final String nom;
  final String description;
  final Color couleur;
  final IconData icone;
}

/// Niveau √©ducatif fran√ßais (CP √† Pr√©pa+2)
enum NiveauEducatif {
  cp(1, 'CP', 'Cours Pr√©paratoire', CycleEducatif.primaire),
  ce1(2, 'CE1', 'Cours √âl√©mentaire 1', CycleEducatif.primaire),
  ce2(3, 'CE2', 'Cours √âl√©mentaire 2', CycleEducatif.primaire),
  cm1(4, 'CM1', 'Cours Moyen 1', CycleEducatif.primaire),
  cm2(5, 'CM2', 'Cours Moyen 2', CycleEducatif.primaire),
  sixieme(6, '6√®me', 'Sixi√®me', CycleEducatif.college),
  cinquieme(7, '5√®me', 'Cinqui√®me', CycleEducatif.college),
  quatrieme(8, '4√®me', 'Quatri√®me', CycleEducatif.college),
  troisieme(9, '3√®me', 'Troisi√®me', CycleEducatif.college),
  seconde(10, '2nde', 'Seconde', CycleEducatif.lycee),
  premiere(11, '1√®re', 'Premi√®re', CycleEducatif.lycee),
  terminale(12, 'Term', 'Terminale', CycleEducatif.lycee),
  prepa1(13, 'Pr√©pa+1', 'Premi√®re ann√©e pr√©pa', CycleEducatif.superieur),
  prepa2(14, 'Pr√©pa+2', 'Deuxi√®me ann√©e pr√©pa', CycleEducatif.superieur);

  const NiveauEducatif(this.niveau, this.nom, this.description, this.cycle);
  final int niveau;
  final String nom;
  final String description;
  final CycleEducatif cycle;

  /// Couleur du niveau (h√©rit√©e du cycle)
  Color get couleur => cycle.couleur;

  /// Ic√¥ne du niveau (h√©rit√©e du cycle)
  IconData get icone => cycle.icone;

  /// V√©rifie si le niveau est en primaire
  bool get isPrimaire => cycle == CycleEducatif.primaire;

  /// V√©rifie si le niveau est au coll√®ge
  bool get isCollege => cycle == CycleEducatif.college;

  /// V√©rifie si le niveau est au lyc√©e
  bool get isLycee => cycle == CycleEducatif.lycee;

  /// V√©rifie si le niveau est sup√©rieur
  bool get isSuperieur => cycle == CycleEducatif.superieur;

  /// Obtient le niveau pr√©c√©dent
  NiveauEducatif? get niveauPrecedent {
    if (niveau <= 1) return null;
    return NiveauEducatif.values.firstWhere((n) => n.niveau == niveau - 1);
  }

  /// Obtient le niveau suivant
  NiveauEducatif? get niveauSuivant {
    if (niveau >= 14) return null;
    return NiveauEducatif.values.firstWhere((n) => n.niveau == niveau + 1);
  }

  /// Obtient tous les niveaux d'un cycle
  static List<NiveauEducatif> getNiveauxDuCycle(CycleEducatif cycle) {
    return values.where((n) => n.cycle == cycle).toList();
  }

  /// Obtient le niveau par son num√©ro
  static NiveauEducatif? fromNiveau(int niveau) {
    try {
      return values.firstWhere((n) => n.niveau == niveau);
    } catch (e) {
      return null;
    }
  }
}

/// Classe principale pour g√©rer les niveaux √©ducatifs
class EducationalLevelManager {
  static const Map<NiveauEducatif, Map<String, ValueRange>> _parameterRanges = {
    // PRIMAIRE (CP √† CM2)
    NiveauEducatif.cp: {
      'a': ValueRange(min: 1, max: 5, description: 'Nombres tr√®s simples'),
      'b': ValueRange(min: 1, max: 5, description: 'Nombres tr√®s simples'),
      'c': ValueRange(min: 1, max: 5, description: 'Nombres tr√®s simples'),
    },
    NiveauEducatif.ce1: {
      'a': ValueRange(min: 1, max: 10, description: 'Nombres simples'),
      'b': ValueRange(min: 1, max: 10, description: 'Nombres simples'),
      'c': ValueRange(min: 1, max: 10, description: 'Nombres simples'),
    },
    NiveauEducatif.ce2: {
      'a': ValueRange(min: 1, max: 20, description: 'Nombres jusqu\'√† 20'),
      'b': ValueRange(min: 1, max: 20, description: 'Nombres jusqu\'√† 20'),
      'c': ValueRange(min: 1, max: 20, description: 'Nombres jusqu\'√† 20'),
    },
    NiveauEducatif.cm1: {
      'a': ValueRange(min: 1, max: 50, description: 'Nombres jusqu\'√† 50'),
      'b': ValueRange(min: 1, max: 50, description: 'Nombres jusqu\'√† 50'),
      'c': ValueRange(min: 1, max: 50, description: 'Nombres jusqu\'√† 50'),
    },
    NiveauEducatif.cm2: {
      'a': ValueRange(min: 1, max: 100, description: 'Nombres jusqu\'√† 100'),
      'b': ValueRange(min: 1, max: 100, description: 'Nombres jusqu\'√† 100'),
      'c': ValueRange(min: 1, max: 100, description: 'Nombres jusqu\'√† 100'),
    },
    
    // COLL√àGE (6√®me √† 3√®me)
    NiveauEducatif.sixieme: {
      'a': ValueRange(min: 1, max: 100, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 100, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 100, description: 'Nombres entiers'),
    },
    NiveauEducatif.cinquieme: {
      'a': ValueRange(min: 1, max: 200, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 200, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 200, description: 'Nombres entiers'),
    },
    NiveauEducatif.quatrieme: {
      'a': ValueRange(min: 1, max: 500, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 500, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 500, description: 'Nombres entiers'),
    },
    NiveauEducatif.troisieme: {
      'a': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
    },
    
    // LYC√âE (2nde √† Terminale)
    NiveauEducatif.seconde: {
      'a': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
    },
    NiveauEducatif.premiere: {
      'a': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
    },
    NiveauEducatif.terminale: {
      'a': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
    },
    
    // SUP√âRIEUR (Pr√©pa+1 √† Pr√©pa+2)
    NiveauEducatif.prepa1: {
      'a': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
    },
    NiveauEducatif.prepa2: {
      'a': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'b': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
      'c': ValueRange(min: 1, max: 1000, description: 'Nombres entiers'),
    },
  };

  /// Obtient les intervalles de valeurs pour un niveau donn√©
  static Map<String, ValueRange> getParameterRanges(NiveauEducatif niveau) {
    return _parameterRanges[niveau] ?? {};
  }

  /// Obtient l'intervalle pour un param√®tre sp√©cifique √† un niveau
  static ValueRange? getParameterRange(NiveauEducatif niveau, String parameter) {
    return _parameterRanges[niveau]?[parameter];
  }

  /// G√©n√®re une valeur al√©atoire pour un param√®tre √† un niveau donn√©
  static int generateParameterValue(NiveauEducatif niveau, String parameter, math.Random random) {
    final range = getParameterRange(niveau, parameter);
    if (range == null) {
      // Fallback: valeurs par d√©faut
      return 1 + random.nextInt(10);
    }
    return range.generateRandomValue(random);
  }

  /// V√©rifie si un niveau supporte un param√®tre
  static bool supportsParameter(NiveauEducatif niveau, String parameter) {
    return _parameterRanges[niveau]?.containsKey(parameter) ?? false;
  }

  /// Obtient tous les niveaux supportant un param√®tre
  static List<NiveauEducatif> getNiveauxSupportantParametre(String parameter) {
    return NiveauEducatif.values.where((niveau) => 
      _parameterRanges[niveau]?.containsKey(parameter) ?? false
    ).toList();
  }
}
