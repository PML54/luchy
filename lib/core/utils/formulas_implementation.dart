/// <cursor>
/// LUCHY - Impl√©mentation des Formules Math√©matiques (Architecture OOP)
///
/// Impl√©mentation concr√®te des 25 formules math√©matiques existantes
/// dans la nouvelle architecture orient√©e objet.
///
/// COMPOSANTS PRINCIPAUX:
/// - Impl√©mentation des formules de bin√¥me (10 formules)
/// - Impl√©mentation des formules de sommes (8 formules)
/// - Impl√©mentation des formules combinatoires (7 formules)
/// - Fonctions de calcul pour chaque formule
/// - Validation automatique des param√®tres
///
/// √âTAT ACTUEL:
/// - 25 formules impl√©ment√©es et valid√©es
/// - Calculs automatiques fonctionnels
/// - Validation des param√®tres int√©gr√©e
/// - Architecture extensible pour ajouts futurs
///
/// HISTORIQUE R√âCENT:
/// - 2025-01-27: Impl√©mentation compl√®te des 25 formules
/// - Tests de validation automatique
/// - Optimisation des calculs
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (Impl√©mentation compl√®te du syst√®me)
/// üìÖ Derni√®re modification: 2025-01-27
/// </cursor>

import 'mathematical_formulas_oop.dart';

/// =====================================================================================
/// üìê FORMULES DE BIN√îME (10 formules)
/// =====================================================================================

/// 1. D√©veloppement g√©n√©ral du bin√¥me de Newton
final binomialDevelopment = BinomialFormula(
  id: 'binomial_development',
  name: 'D√©veloppement g√©n√©ral du bin√¥me',
  difficulty: DifficultyLevel.PREPA,
  description: 'Formule g√©n√©rale du d√©veloppement du bin√¥me de Newton',
  leftExpression: r'(a+b)^n',
  rightExpression: r'\sum_{k=0}^{n} \binom{n}{k} a^{n-k} b^{k}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'exposant entier positif',
      type: ArgumentType.NATURAL,
      minValue: 0,
      maxValue: 10,
    ),
  ],
  tags: ['bin√¥me', 'd√©veloppement', 's√©rie', 'coefficients'],
);

/// 2. Coefficient binomial de base
final binomialCoefficient = BinomialFormula(
  id: 'binomial_coefficient',
  name: 'Coefficient binomial',
  difficulty: DifficultyLevel.LYCEE,
  description: 'D√©finition du coefficient binomial',
  leftExpression: r'\binom{n}{k}',
  rightExpression: r'\frac{n!}{k!\,(n-k)!}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'taille de l\'ensemble',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
    FormulaArgument(
      name: 'k',
      description: 'nombre d\'√©l√©ments √† choisir',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['bin√¥me', 'coefficient', 'combinatoire', 'factorielle'],
);

/// 3. Relation de Pascal
final pascalRelation = BinomialFormula(
  id: 'pascal_relation',
  name: 'Relation de Pascal',
  difficulty: DifficultyLevel.PREPA,
  description: 'Relation fondamentale entre coefficients binomiaux',
  leftExpression: r'\binom{n}{k}',
  rightExpression: r'\binom{n-1}{k} + \binom{n-1}{k-1}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'indice n (n ‚â• 1)',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
    FormulaArgument(
      name: 'k',
      description: 'indice k (0 ‚â§ k ‚â§ n)',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['bin√¥me', 'pascal', 'r√©currence'],
);

/// 4. Somme de tous les coefficients
final binomialSum = BinomialFormula(
  id: 'binomial_sum',
  name: 'Somme des coefficients binomiaux',
  difficulty: DifficultyLevel.PREPA,
  description: 'Somme de tous les coefficients d\'un d√©veloppement binomial',
  leftExpression: r'\sum_{k=0}^{n} \binom{n}{k}',
  rightExpression: r'2^n',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'exposant entier positif',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['bin√¥me', 'somme', 'puissance'],
);

/// 5. D√©veloppement de (1+x)^n
final binomialOnePlusX = BinomialFormula(
  id: 'binomial_one_plus_x',
  name: 'D√©veloppement de (1+x)^n',
  difficulty: DifficultyLevel.PREPA,
  description: 'Cas particulier du d√©veloppement binomial avec a=1',
  leftExpression: r'(1+x)^n',
  rightExpression: r'\sum_{k=0}^{n} \binom{n}{k} x^{k}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'exposant entier positif',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['bin√¥me', 'd√©veloppement', 's√©rie'],
);

/// 6. Somme altern√©e des coefficients
final binomialAlternatingSum = BinomialFormula(
  id: 'binomial_alternating_sum',
  name: 'Somme altern√©e des coefficients',
  difficulty: DifficultyLevel.PREPA,
  description: 'Somme altern√©e des coefficients binomiaux',
  leftExpression: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k}',
  rightExpression: r'0 \quad (n \ge 1)',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'exposant entier ‚â• 1',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
  ],
  tags: ['bin√¥me', 'somme', 'altern√©e'],
);

/// 7. Formule de hockey-stick
final hockeyStickFormula = BinomialFormula(
  id: 'hockey_stick_formula',
  name: 'Formule de hockey-stick',
  difficulty: DifficultyLevel.PREPA,
  description: 'Relation entre sommes de coefficients binomiaux',
  leftExpression: r'\sum_{k=r}^{n} \binom{k}{r}',
  rightExpression: r'\binom{n+1}{r+1} \quad (r \le n)',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'borne sup√©rieure',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
    FormulaArgument(
      name: 'r',
      description: 'indice fixe (r ‚â§ n)',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['bin√¥me', 'somme', 'hockey-stick'],
);

/// 8. Cas particulier k=0
final binomialKZero = BinomialFormula(
  id: 'binomial_k_zero',
  name: 'Coefficient binomial pour k=0',
  difficulty: DifficultyLevel.LYCEE,
  description: 'Valeur du coefficient binomial quand k=0',
  leftExpression: r'\binom{n}{0}',
  rightExpression: r'1',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'indice n quelconque',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['bin√¥me', 'cas_particulier'],
);

/// 9. Cas particulier k=n
final binomialKN = BinomialFormula(
  id: 'binomial_k_n',
  name: 'Coefficient binomial pour k=n',
  difficulty: DifficultyLevel.LYCEE,
  description: 'Valeur du coefficient binomial quand k=n',
  leftExpression: r'\binom{n}{n}',
  rightExpression: r'1',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'indice n quelconque',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['bin√¥me', 'cas_particulier'],
);

/// 10. Sym√©trie des coefficients
final binomialSymmetry = BinomialFormula(
  id: 'binomial_symmetry',
  name: 'Sym√©trie des coefficients binomiaux',
  difficulty: DifficultyLevel.LYCEE,
  description: 'Propri√©t√© de sym√©trie des coefficients binomiaux',
  leftExpression: r'\binom{n}{k}',
  rightExpression: r'\binom{n}{n-k}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'indice n',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
    FormulaArgument(
      name: 'k',
      description: 'indice k (0 ‚â§ k ‚â§ n)',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['bin√¥me', 'sym√©trie', 'propri√©t√©'],
);

/// =====================================================================================
/// üîµ FORMULES DE SOMMES (8 formules)
/// =====================================================================================

/// 11. Somme des n premiers entiers
final arithmeticSum = SummationFormula(
  id: 'arithmetic_sum',
  name: 'Somme des n premiers entiers',
  difficulty: DifficultyLevel.COLLEGE,
  description: 'Formule de la somme des n premiers entiers naturels',
  leftExpression: r'\sum_{k=1}^{n} k',
  rightExpression: r'\frac{n(n+1)}{2}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'nombre d\'entiers √† sommer',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
  ],
  tags: ['somme', 'arithm√©tique', 'entiers'],
);

/// 12. Somme des carr√©s
final squareSum = SummationFormula(
  id: 'square_sum',
  name: 'Somme des carr√©s',
  difficulty: DifficultyLevel.LYCEE,
  description: 'Formule de la somme des carr√©s des n premiers entiers',
  leftExpression: r'\sum_{k=1}^{n} k^2',
  rightExpression: r'\frac{n(n+1)(2n+1)}{6}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'nombre de termes',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
  ],
  tags: ['somme', 'carr√©s', 'puissances'],
);

/// 13. Somme des cubes
final cubeSum = SummationFormula(
  id: 'cube_sum',
  name: 'Somme des cubes',
  difficulty: DifficultyLevel.PREPA,
  description: 'Formule de la somme des cubes des n premiers entiers',
  leftExpression: r'\sum_{k=1}^{n} k^3',
  rightExpression: r'\left(\frac{n(n+1)}{2}\right)^2',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'nombre de termes',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
  ],
  tags: ['somme', 'cubes', 'puissances'],
);

/// 14. Somme g√©om√©trique finie
final geometricSumFinite = SummationFormula(
  id: 'geometric_sum_finite',
  name: 'Somme g√©om√©trique finie',
  difficulty: DifficultyLevel.LYCEE,
  description: 'Formule de la somme des termes d\'une suite g√©om√©trique finie',
  leftExpression: r'\sum_{k=0}^{n} q^k',
  rightExpression: r'\frac{1-q^{n+1}}{1-q} \quad (q \neq 1)',
  formulaArguments: const [
    FormulaArgument(
      name: 'q',
      description: 'raison de la suite g√©om√©trique (q ‚â† 1)',
      type: ArgumentType.REAL,
    ),
    FormulaArgument(
      name: 'n',
      description: 'nombre de termes',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['somme', 'g√©om√©trique', 'finie'],
);

/// 15. Somme g√©om√©trique infinie
final geometricSumInfinite = SummationFormula(
  id: 'geometric_sum_infinite',
  name: 'Somme g√©om√©trique infinie',
  difficulty: DifficultyLevel.PREPA,
  description:
      'Formule de la somme d\'une suite g√©om√©trique infinie convergente',
  leftExpression: r'\sum_{k=0}^{\infty} q^k',
  rightExpression: r'\frac{1}{1-q} \quad (|q| < 1)',
  formulaArguments: const [
    FormulaArgument(
      name: 'q',
      description: 'raison de la suite (|q| < 1)',
      type: ArgumentType.REAL,
      minValue: -1,
      maxValue: 1,
    ),
  ],
  tags: ['somme', 'g√©om√©trique', 'infinie', 'convergence'],
);

/// 16. Somme de constantes
final constantSum = SummationFormula(
  id: 'constant_sum',
  name: 'Somme de constantes',
  difficulty: DifficultyLevel.COLLEGE,
  description: 'Somme de n termes √©gaux √† 1',
  leftExpression: r'\sum_{k=0}^{n} 1',
  rightExpression: r'n+1',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'nombre de termes',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['somme', 'constante', 'basique'],
);

/// 17. Somme des impairs
final oddSum = SummationFormula(
  id: 'odd_sum',
  name: 'Somme des impairs',
  difficulty: DifficultyLevel.COLLEGE,
  description: 'Somme des n premiers nombres impairs',
  leftExpression: r'\sum_{k=1}^{n} (2k-1)',
  rightExpression: r'n^2',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'nombre de termes impairs',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
  ],
  tags: ['somme', 'impairs', 'arithm√©tique'],
);

/// 18. Somme t√©lescopique
final telescopingSum = SummationFormula(
  id: 'telescoping_sum',
  name: 'Somme t√©lescopique',
  difficulty: DifficultyLevel.LYCEE,
  description: 'Somme de fractions partielles qui se simplifient',
  leftExpression: r'\sum_{k=1}^{n} \frac{1}{k(k+1)}',
  rightExpression: r'1 - \frac{1}{n+1}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'nombre de termes',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
  ],
  tags: ['somme', 't√©lescopique', 'fractions'],
);

/// =====================================================================================
/// üü£ FORMULES COMBINATOIRES (7 formules)
/// =====================================================================================

/// 19. D√©finition des combinaisons
final combinationDefinition = CombinatorialFormula(
  id: 'combination_definition',
  name: 'D√©finition des combinaisons',
  difficulty: DifficultyLevel.LYCEE,
  description: 'Nombre de combinaisons de k √©l√©ments parmi n',
  leftExpression: r'C(n,k) = \binom{n}{k}',
  rightExpression: r'\frac{n!}{k!(n-k)!}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'taille de l\'ensemble',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
    FormulaArgument(
      name: 'k',
      description: 'nombre d\'√©l√©ments √† choisir',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['combinatoire', 'd√©finitions', 'coefficient'],
);

/// 20. Sym√©trie des combinaisons
final combinationSymmetry = CombinatorialFormula(
  id: 'combination_symmetry',
  name: 'Sym√©trie des combinaisons',
  difficulty: DifficultyLevel.LYCEE,
  description: 'Propri√©t√© de sym√©trie des coefficients binomiaux',
  leftExpression: r'\binom{n}{k}',
  rightExpression: r'\binom{n}{n-k}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'taille de l\'ensemble',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
    FormulaArgument(
      name: 'k',
      description: 'nombre d\'√©l√©ments √† choisir',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['combinatoire', 'sym√©trie', 'propri√©t√©'],
);

/// 21. Relation de r√©currence combinatoire
final combinationRecurrence = CombinatorialFormula(
  id: 'combination_recurrence',
  name: 'Relation de r√©currence',
  difficulty: DifficultyLevel.PREPA,
  description: 'Relation de r√©currence pour les coefficients binomiaux',
  leftExpression: r'\binom{n}{k}',
  rightExpression: r'\binom{n-1}{k} + \binom{n-1}{k-1}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'indice n (n ‚â• 1)',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
    FormulaArgument(
      name: 'k',
      description: 'indice k (0 ‚â§ k ‚â§ n)',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['combinatoire', 'r√©currence', 'pascal'],
);

/// 22. D√©veloppement multinomial
final multinomialExpansion = CombinatorialFormula(
  id: 'multinomial_expansion',
  name: 'D√©veloppement multinomial',
  difficulty: DifficultyLevel.PREPA,
  description: 'G√©n√©ralisation du d√©veloppement du bin√¥me',
  leftExpression: r'(a+b)^n',
  rightExpression: r'\sum_{k=0}^{n} \binom{n}{k} a^{n-k} b^{k}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'exposant entier positif',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['combinatoire', 'multinomial', 'd√©veloppement'],
);

/// 23. Somme des coefficients
final combinatorialSum = CombinatorialFormula(
  id: 'combinatorial_sum',
  name: 'Somme des coefficients',
  difficulty: DifficultyLevel.PREPA,
  description: 'Somme de tous les coefficients binomiaux',
  leftExpression: r'\sum_{k=0}^{n} \binom{n}{k}',
  rightExpression: r'2^n',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'exposant entier positif',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['combinatoire', 'somme', 'puissance'],
);

/// 24. Somme altern√©e combinatoire
final combinatorialAlternatingSum = CombinatorialFormula(
  id: 'combinatorial_alternating_sum',
  name: 'Somme altern√©e combinatoire',
  difficulty: DifficultyLevel.PREPA,
  description: 'Somme altern√©e des coefficients binomiaux',
  leftExpression: r'\sum_{k=0}^{n} (-1)^k \binom{n}{k}',
  rightExpression: r'0 \quad (n \ge 1)',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'exposant entier ‚â• 1',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
  ],
  tags: ['combinatoire', 'somme', 'altern√©e'],
);

/// 25. Formule de Vandermonde
final vandermondeFormula = CombinatorialFormula(
  id: 'vandermonde_formula',
  name: 'Formule de Vandermonde',
  difficulty: DifficultyLevel.PREPA,
  description: 'Produit de sommes de coefficients binomiaux',
  leftExpression: r'\sum_{k=0}^{n} \binom{m}{k} \binom{n-m}{n-k}',
  rightExpression: r'\binom{n}{n}',
  formulaArguments: const [
    FormulaArgument(
      name: 'n',
      description: 'indice n',
      type: ArgumentType.NATURAL,
      minValue: 1,
    ),
    FormulaArgument(
      name: 'm',
      description: 'indice m (0 ‚â§ m)',
      type: ArgumentType.NATURAL,
      minValue: 0,
    ),
  ],
  tags: ['combinatoire', 'vandermonde', 'convolution'],
);

/// =====================================================================================
/// üìö LISTE COMPL√àTE DES FORMULES
/// =====================================================================================

/// Liste compl√®te des 25 formules impl√©ment√©es
final List<MathematicalFormula> allMathematicalFormulas = [
  // Formules de bin√¥me (10)
  binomialDevelopment,
  binomialCoefficient,
  pascalRelation,
  binomialSum,
  binomialOnePlusX,
  binomialAlternatingSum,
  hockeyStickFormula,
  binomialKZero,
  binomialKN,
  binomialSymmetry,

  // Formules de sommes (8)
  arithmeticSum,
  squareSum,
  cubeSum,
  geometricSumFinite,
  geometricSumInfinite,
  constantSum,
  oddSum,
  telescopingSum,

  // Formules combinatoires (7)
  combinationDefinition,
  combinationSymmetry,
  combinationRecurrence,
  multinomialExpansion,
  combinatorialSum,
  combinatorialAlternatingSum,
  vandermondeFormula,
];

/// =====================================================================================
/// üéØ FONCTIONS DE GESTION
/// =====================================================================================

/// Fonction pour initialiser la biblioth√®que avec toutes les formules
void initializeFormulaLibrary() {
  final library = FormulaLibrary();

  for (final formula in allMathematicalFormulas) {
    library.addFormula(formula);
  }

  print(
      '‚úÖ Biblioth√®que de formules initialis√©e avec ${allMathematicalFormulas.length} formules');
  library.printStatistics();
}

/// Fonction pour tester une formule avec des param√®tres
void testFormula(String formulaId, Map<String, num> parameters) {
  final library = FormulaLibrary();

  // Initialiser si pas d√©j√† fait
  if (library.allFormulas.isEmpty) {
    initializeFormulaLibrary();
  }

  final formula = library.getFormulaById(formulaId);
  if (formula == null) {
    print('‚ùå Formule non trouv√©e: $formulaId');
    return;
  }

  print('üßÆ Test de la formule: ${formula.name}');
  print('üìù Description: ${formula.description}');
  print('üî¢ Param√®tres: $parameters');

  // Validation des param√®tres
  if (!formula.validateParameters(parameters)) {
    print('‚ùå Param√®tres invalides pour cette formule');
    return;
  }

  print('‚úÖ Param√®tres valid√©s');

  // Calcul si possible
  final result = formula.calculate(parameters);
  if (result != null) {
    print('üßÆ R√©sultat calcul√©: $result');
  } else {
    print('‚ÑπÔ∏è Calcul non impl√©ment√© pour cette formule');
  }

  // Affichage LaTeX
  print('üìê LaTeX: ${formula.fullLatex}');
}

/// Fonction pour rechercher des formules
List<MathematicalFormula> searchFormulas(String query) {
  final library = FormulaLibrary();

  // Initialiser si pas d√©j√† fait
  if (library.allFormulas.isEmpty) {
    initializeFormulaLibrary();
  }

  return library.searchFormulas(query);
}

/// Fonction pour obtenir les statistiques
Map<String, int> getFormulaStatistics() {
  final library = FormulaLibrary();

  // Initialiser si pas d√©j√† fait
  if (library.allFormulas.isEmpty) {
    initializeFormulaLibrary();
  }

  return library.statistics;
}
