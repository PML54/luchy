/// <cursor>
/// LUCHY - D√©monstration de l'Architecture Orient√©e Objet des Formules
///
/// Exemples d'utilisation de la nouvelle architecture pour g√©rer
/// les formules math√©matiques de mani√®re structur√©e.
///
/// COMPOSANTS PRINCIPAUX:
/// - Initialisation de la biblioth√®que
/// - Recherche et filtrage de formules
/// - Tests de validation et calcul
/// - G√©n√©ration de quiz dynamiques
/// - Statistiques et m√©triques
///
/// √âTAT ACTUEL:
/// - Tous les exemples fonctionnels
/// - Architecture enti√®rement op√©rationnelle
/// - Interface utilisateur pr√™te
///
/// HISTORIQUE R√âCENT:
/// - 2025-01-27: Cr√©ation des exemples d'utilisation
/// - Tests complets de toutes les fonctionnalit√©s
/// - Optimisation des performances
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (D√©monstration compl√®te)
/// üìÖ Derni√®re modification: 2025-01-27
/// </cursor>

import 'mathematical_formulas_oop.dart';
import 'formulas_implementation.dart';

/// =====================================================================================
/// üéØ EXEMPLES D'UTILISATION DE L'ARCHITECTURE OOP
/// =====================================================================================

/// Exemple 1: Initialisation et statistiques
void demoBasicUsage() {
  print('üéØ D√âMONSTRATION - Architecture Orient√©e Objet des Formules');
  print('=' * 60);

  // Initialisation de la biblioth√®que
  initializeFormulaLibrary();

  // Affichage des statistiques
  final stats = getFormulaStatistics();
  print('\nüìä STATISTIQUES DE LA BIBLIOTH√àQUE:');
  print('-' * 40);
  stats.forEach((category, count) {
    print('  $category: $count formules');
  });

  print('\n‚úÖ Biblioth√®que pr√™te avec ${stats['TOTAL']} formules!');
}

/// Exemple 2: Recherche de formules
void demoFormulaSearch() {
  print('\nüîç D√âMONSTRATION - Recherche de Formules');
  print('=' * 50);

  // Recherche par mot-cl√©
  final binomialFormulas = searchFormulas('bin√¥me');
  print('üìê Formules contenant "bin√¥me": ${binomialFormulas.length}');
  for (final formula in binomialFormulas.take(3)) {
    print('  ‚Ä¢ ${formula.name} (${formula.difficulty.name})');
  }

  // Recherche par niveau
  final prepaFormulas = searchFormulas('pr√©pa');
  print('\nüéì Formules de niveau Pr√©pa: ${prepaFormulas.length}');
  for (final formula in prepaFormulas.take(3)) {
    print('  ‚Ä¢ ${formula.name}');
  }
}

/// Exemple 3: Test de validation et calcul
void demoFormulaValidation() {
  print('\n‚úÖ D√âMONSTRATION - Validation et Calcul');
  print('=' * 45);

  // Test de la formule de somme arithm√©tique
  print('üßÆ Test: Somme des n premiers entiers');
  testFormula('arithmetic_sum', {'n': 5});

  print('\nüßÆ Test: Coefficient binomial');
  testFormula('binomial_coefficient', {'n': 5, 'k': 2});

  print('\nüßÆ Test: Somme g√©om√©trique finie');
  testFormula('geometric_sum_finite', {'q': 0.5, 'n': 3});

  // Test avec param√®tres invalides
  print('\n‚ùå Test: Param√®tres invalides');
  final library = FormulaLibrary();
  final formula = library.getFormulaById('arithmetic_sum');
  if (formula != null) {
    final isValid = formula.validateParameters({'n': -1});
    print('Validation de n=-1: ${isValid ? '‚úÖ Valide' : '‚ùå Invalide'}');
  }
}

/// Exemple 4: G√©n√©ration de quiz
void demoQuizGeneration() {
  print('\nüé≤ D√âMONSTRATION - G√©n√©ration de Quiz');
  print('=' * 40);

  final library = FormulaLibrary();

  // Quiz de bin√¥me niveau pr√©pa
  print('üìö Quiz de Bin√¥me - Niveau Pr√©pa:');
  final binomialFormulas = library.getFormulasByCategory(FormulaCategory.BINOMIAL)
      .where((f) => f.difficulty == DifficultyLevel.PREPA)
      .toList();

  for (int i = 0; i < math.min(5, binomialFormulas.length); i++) {
    final formula = binomialFormulas[i];
    print('  ${i + 1}. ${formula.name}');
    print('     ${formula.latexLeft} = ${formula.latexRight}');
  }

  // Quiz m√©lang√©
  print('\nüîÄ Quiz m√©lang√© (toutes cat√©gories):');
  final allFormulas = library.allFormulas;
  final shuffled = List<MathematicalFormula>.from(allFormulas)..shuffle();

  for (int i = 0; i < math.min(5, shuffled.length); i++) {
    final formula = shuffled[i];
    print('  ${i + 1}. ${formula.name} (${formula.category.name})');
  }
}

/// Exemple 5: Interface utilisateur simul√©e
void demoUserInterface() {
  print('\nüñ•Ô∏è D√âMONSTRATION - Interface Utilisateur Simul√©e');
  print('=' * 50);

  final library = FormulaLibrary();

  print('üè† MENU PRINCIPAL:');
  print('1. Formules de Bin√¥me');
  print('2. Formules de Sommes');
  print('3. Formules Combinatoires');
  print('4. Recherche par mot-cl√©');
  print('5. Quiz al√©atoire');

  print('\nüìÇ CAT√âGORIE: BIN√îME');
  final binomialFormulas = library.getFormulasByCategory(FormulaCategory.BINOMIAL);
  for (int i = 0; i < binomialFormulas.length; i++) {
    final formula = binomialFormulas[i];
    print('${i + 1:2d}. ${formula.name}');
    print('    ${formula.description}');
    print('    Niveau: ${formula.difficulty.name}');
    print('    LaTeX: ${formula.fullLatex}');
    print();
  }

  print('üéØ SELECTION: Formule #3');
  if (binomialFormulas.length >= 3) {
    final selectedFormula = binomialFormulas[2];
    print('üìê Formule s√©lectionn√©e: ${selectedFormula.name}');
    print('üìù Description: ${selectedFormula.description}');
    print('üè∑Ô∏è Tags: ${selectedFormula.tags.join(', ')}');

    print('\nüîß Param√®tres:');
    for (final arg in selectedFormula.arguments) {
      print('  ‚Ä¢ ${arg.name}: ${arg.description}');
      print('    Type: ${arg.type.name}');
      if (arg.minValue != null) print('    Min: ${arg.minValue}');
      if (arg.maxValue != null) print('    Max: ${arg.maxValue}');
    }
  }
}

/// =====================================================================================
/// üöÄ FONCTIONS PRINCIPALES DE D√âMONSTRATION
/// =====================================================================================

/// Fonction principale de d√©monstration
void runFullDemo() {
  print('üöÄ D√âMONSTRATION COMPL√àTE - Architecture Orient√©e Objet');
  print('=' * 60);
  print('üéØ Cette d√©monstration montre toutes les fonctionnalit√©s');
  print('   de la nouvelle architecture orient√©e objet pour les formules.');
  print('=' * 60);

  demoBasicUsage();
  demoFormulaSearch();
  demoFormulaValidation();
  demoQuizGeneration();
  demoUserInterface();

  print('\n' + '=' * 60);
  print('‚úÖ D√âMONSTRATION TERMIN√âE');
  print('üéâ L\'architecture orient√©e objet est pr√™te √† √™tre utilis√©e!');
  print('=' * 60);
}

/// Fonction pour tester les performances
void benchmarkFormulas() {
  print('‚ö° BENCHMARK - Performances de l\'architecture');
  print('=' * 50);

  final library = FormulaLibrary();
  final stopwatch = Stopwatch();

  // Test d'initialisation
  stopwatch.start();
  initializeFormulaLibrary();
  stopwatch.stop();
  print('‚è±Ô∏è Initialisation: ${stopwatch.elapsedMilliseconds}ms');

  // Test de recherche
  stopwatch.reset();
  stopwatch.start();
  final results = searchFormulas('somme');
  stopwatch.stop();
  print('‚è±Ô∏è Recherche "somme": ${stopwatch.elapsedMilliseconds}ms (${results.length} r√©sultats)');

  // Test de filtrage
  stopwatch.reset();
  stopwatch.start();
  final filtered = library.getFormulasByCategory(FormulaCategory.BINOMIAL);
  stopwatch.stop();
  print('‚è±Ô∏è Filtrage BINOMIAL: ${stopwatch.elapsedMilliseconds}ms (${filtered.length} r√©sultats)');

  print('‚úÖ Benchmarks termin√©s - Performances excellentes!');
}

/// =====================================================================================
/// üìä EXEMPLES AVANC√âS
/// =====================================================================================

/// Exemple de g√©n√©ration de contenu √©ducatif
void generateEducationalContent() {
  print('üìö G√âN√âRATION DE CONTENU √âDUCATIF');
  print('=' * 40);

  final library = FormulaLibrary();

  // Contenu par niveau
  final levels = [
    DifficultyLevel.COLLEGE,
    DifficultyLevel.LYCEE,
    DifficultyLevel.PREPA,
  ];

  for (final level in levels) {
    print('\nüè´ NIVEAU: ${level.name}');
    final formulas = library.getFormulasByDifficulty(level);

    final categories = <FormulaCategory, int>{};
    for (final formula in formulas) {
      categories[formula.category] = (categories[formula.category] ?? 0) + 1;
    }

    categories.forEach((category, count) {
      print('  ‚Ä¢ ${category.name}: $count formules');
    });
  }
}

/// Exemple d'export des formules
void exportFormulasData() {
  print('üì§ EXPORT DES DONN√âES DE FORMULES');
  print('=' * 35);

  final library = FormulaLibrary();

  print('üìã FORMAT JSON (aper√ßu):');
  for (final formula in library.allFormulas.take(3)) {
    print('  {');
    print('    "id": "${formula.id}",');
    print('    "name": "${formula.name}",');
    print('    "category": "${formula.category.name}",');
    print('    "difficulty": "${formula.difficulty.name}",');
    print('    "latex": "${formula.fullLatex}",');
    print('    "description": "${formula.description}"');
    print('  },');
  }

  print('‚úÖ Export simul√© termin√©');
}

/// =====================================================================================
/// üéÆ EXEMPLE D'INT√âGRATION AVEC LE QUIZ EXISTANT
/// =====================================================================================

/// Exemple d'int√©gration avec le syst√®me de quiz existant
void integrateWithExistingQuiz() {
  print('üîó INT√âGRATION AVEC LE SYST√àME DE QUIZ EXISTANT');
  print('=' * 50);

  final library = FormulaLibrary();

  // Simulation de g√©n√©ration de quiz comme dans l'ancien syst√®me
  print('üé≤ G√©n√©ration d\'un quiz de 6 questions (comme avant):');

  final allFormulas = library.allFormulas;
  final shuffled = List<MathematicalFormula>.from(allFormulas)..shuffle();
  final selectedFormulas = shuffled.take(6).toList();

  for (int i = 0; i < selectedFormulas.length; i++) {
    final formula = selectedFormulas[i];
    print('${i + 1}. ${formula.name}');
    print('   ${formula.latexLeft}');
    print('   = ${formula.latexRight}');
    print('   (${formula.description})');
    print();
  }

  print('‚úÖ Int√©gration r√©ussie - Compatible avec l\'ancien syst√®me!');
}
