/// <curseur>
/// LUCHY - Configuration du recadrage intelligent
///
/// Syst√®me de recadrage adaptatif bas√© sur les mesures UI r√©elles
/// pour optimiser l'affichage des images selon l'appareil et l'orientation.
///
/// COMPOSANTS PRINCIPAUX:
/// - DeviceRatioConfig: Configuration par appareil/orientation
/// - SmartCropConfig: Gestionnaire central des configurations
/// - getRatioConfig(): S√©lection automatique selon contexte
/// - isInRange(): V√©rification tol√©rance ratios
///
/// √âTAT ACTUEL:
/// - iPhone: Ratios mesur√©s empiriquement (Portrait 1.90, Paysage 0.37)
/// - iPad: Ratios estim√©s selon √©crans natifs
/// - Android: Configurations adaptatives par taille
/// - Tol√©rance: 10% par d√©faut, ajustable
///
/// HISTORIQUE R√âCENT:
/// - Mesures iPhone r√©elles via overlay debug
/// - Calculs ratios optimaux portrait/paysage
/// - Configuration modulaire par appareil
/// - Documentation mise √† jour format <curseur>
///
/// üîß POINTS D'ATTENTION:
/// - Device detection: Utiliser MediaQuery et Platform
/// - Tolerance ranges: √âquilibrer pr√©cision vs flexibilit√©
/// - Performance: Cache des configs pour √©viter recalculs
/// - Extensibilit√©: Faciliter ajout nouveaux appareils
///
/// üöÄ PROCHAINES √âTAPES:
/// - Ajouter d√©tection automatique type appareil
/// - Impl√©menter cache intelligent configurations
/// - Optimiser pour tablettes Android sp√©cifiques
/// - Consid√©rer ratios adaptatifs selon contenu image
///
/// üîó FICHIERS LI√âS:
/// - core/utils/smart_crop_algorithm.dart: Algorithme recadrage
/// - core/utils/image_optimizer.dart: Int√©gration optimisation
/// - features/puzzle/presentation/screens/: D√©tection contexte UI
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê (Optimisation exp√©rience utilisateur)
/// üìÖ Derni√®re modification: 2025-08-25 17:45
/// </curseur>

import 'dart:io';

import 'package:flutter/material.dart';

/// Configuration des ratios cibles pour un appareil/orientation donn√©
class DeviceRatioConfig {
  final double targetRatio;
  final double tolerance;
  final double minRatio;
  final double maxRatio;
  final String description;

  const DeviceRatioConfig({
    required this.targetRatio,
    required this.tolerance,
    required this.description,
  })  : minRatio = targetRatio * (1 - tolerance),
        maxRatio = targetRatio * (1 + tolerance);

  /// V√©rifie si un ratio est dans la plage acceptable
  bool isInRange(double ratio) {
    return ratio >= minRatio && ratio <= maxRatio;
  }

  /// Calcule la distance par rapport au ratio cible (0 = parfait)
  double distanceFromTarget(double ratio) {
    return (ratio - targetRatio).abs() / targetRatio;
  }

  @override
  String toString() {
    return '$description: ${targetRatio.toStringAsFixed(2)} [${minRatio.toStringAsFixed(2)}-${maxRatio.toStringAsFixed(2)}]';
  }
}

/// Gestionnaire central des configurations de recadrage intelligent
class SmartCropConfig {
  // ========== CONFIGURATIONS IPHONE ==========

  /// iPhone Portrait - Bas√© sur mesures r√©elles UI
  static const DeviceRatioConfig iPhonePortrait = DeviceRatioConfig(
    targetRatio: 1.90,
    tolerance: 0.10, // ¬±10%
    description: 'iPhone Portrait (mesure r√©elle)',
  );

  /// iPhone Paysage - Bas√© sur mesures r√©elles UI
  static const DeviceRatioConfig iPhoneLandscape = DeviceRatioConfig(
    targetRatio: 0.37,
    tolerance: 0.10, // ¬±10%
    description: 'iPhone Paysage (mesure r√©elle)',
  );

  // ========== CONFIGURATIONS IPAD ==========

  /// iPad Portrait - Estim√© selon √©cran natif 4:3
  static const DeviceRatioConfig iPadPortrait = DeviceRatioConfig(
    targetRatio: 1.25, // L√©g√®rement plus carr√© que iPhone
    tolerance: 0.08, // ¬±8% (plus strict sur tablette)
    description: 'iPad Portrait (estim√©)',
  );

  /// iPad Paysage - Estim√© selon √©cran natif 4:3
  static const DeviceRatioConfig iPadLandscape = DeviceRatioConfig(
    targetRatio: 0.75, // Plus large que iPhone paysage
    tolerance: 0.08, // ¬±8%
    description: 'iPad Paysage (estim√©)',
  );

  // ========== CONFIGURATIONS ANDROID ==========

  /// Android Phone Portrait - √âcrans allong√©s modernes
  static const DeviceRatioConfig androidPhonePortrait = DeviceRatioConfig(
    targetRatio: 2.0, // Plus allong√© que iPhone
    tolerance: 0.12, // ¬±12% (plus de variabilit√© Android)
    description: 'Android Phone Portrait',
  );

  /// Android Phone Paysage
  static const DeviceRatioConfig androidPhoneLandscape = DeviceRatioConfig(
    targetRatio: 0.35, // Tr√®s large pour √©crans allong√©s
    tolerance: 0.12, // ¬±12%
    description: 'Android Phone Paysage',
  );

  /// Android Tablet Portrait - Bas√© sur ratio 16:10 dominant
  static const DeviceRatioConfig androidTabletPortrait = DeviceRatioConfig(
    targetRatio: 1.4, // Entre iPhone et iPad
    tolerance: 0.10, // ¬±10%
    description: 'Android Tablet Portrait',
  );

  /// Android Tablet Paysage
  static const DeviceRatioConfig androidTabletLandscape = DeviceRatioConfig(
    targetRatio: 0.65, // Ratio 16:10 invers√©
    tolerance: 0.10, // ¬±10%
    description: 'Android Tablet Paysage',
  );

  // ========== D√âTECTION AUTOMATIQUE ==========

  /// D√©tecte automatiquement la configuration optimale
  static DeviceRatioConfig getRatioConfig(BuildContext context) {
    if (context == null) {
      throw ArgumentError('BuildContext cannot be null for smart crop configuration');
    }

    final mediaQuery = MediaQuery.of(context);
    final isLandscape = mediaQuery.orientation == Orientation.landscape;
    final screenWidth = mediaQuery.size.width;
    final screenHeight = mediaQuery.size.height;
    final screenDiagonal = _calculateDiagonal(screenWidth, screenHeight);

    // D√©tection plateforme
    if (Platform.isIOS) {
      return _getIOSConfig(screenDiagonal, isLandscape);
    } else if (Platform.isAndroid) {
      return _getAndroidConfig(screenDiagonal, isLandscape);
    }

    // Fallback par d√©faut
    return isLandscape ? iPhoneLandscape : iPhonePortrait;
  }

  /// Configuration iOS selon la taille d'√©cran
  static DeviceRatioConfig _getIOSConfig(double diagonal, bool isLandscape) {
    // iPad si diagonal > 9 pouces (environ 700+ pixels)
    if (diagonal > 700) {
      return isLandscape ? iPadLandscape : iPadPortrait;
    }
    // iPhone sinon
    return isLandscape ? iPhoneLandscape : iPhonePortrait;
  }

  /// Configuration Android selon la taille d'√©cran
  static DeviceRatioConfig _getAndroidConfig(
      double diagonal, bool isLandscape) {
    // Tablette si diagonal > 7 pouces (environ 600+ pixels)
    if (diagonal > 600) {
      return isLandscape ? androidTabletLandscape : androidTabletPortrait;
    }
    // Smartphone sinon
    return isLandscape ? androidPhoneLandscape : androidPhonePortrait;
  }

  /// Calcule la diagonale de l'√©cran (approximation)
  static double _calculateDiagonal(double width, double height) {
    return (width * width + height * height) /
        (width + height); // Approximation rapide
  }

  // ========== UTILITAIRES ==========

  /// Liste toutes les configurations disponibles
  static List<DeviceRatioConfig> getAllConfigs() {
    return [
      iPhonePortrait,
      iPhoneLandscape,
      iPadPortrait,
      iPadLandscape,
      androidPhonePortrait,
      androidPhoneLandscape,
      androidTabletPortrait,
      androidTabletLandscape,
    ];
  }

  /// Trouve la meilleure configuration pour un ratio donn√©
  static DeviceRatioConfig findBestConfig(double imageRatio) {
    var bestConfig = iPhonePortrait;
    var bestDistance = double.infinity;

    for (final config in getAllConfigs()) {
      final distance = config.distanceFromTarget(imageRatio);
      if (distance < bestDistance) {
        bestDistance = distance;
        bestConfig = config;
      }
    }

    return bestConfig;
  }
}
