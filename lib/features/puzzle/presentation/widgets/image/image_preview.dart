/// <cursor>
/// LUCHY - Widget de pr√©visualisation d'image
///
/// Composant d'affichage de la pr√©visualisation de l'image compl√®te
/// du puzzle avec contr√¥le de visibilit√© dynamique.
///
/// COMPOSANTS PRINCIPAUX:
/// - ImagePreview: Widget principal de pr√©visualisation
/// - imagePreviewVisibilityProvider: Provider contr√¥le visibilit√©
/// - ImagePreviewControl: Extension pour contr√¥le programmatique
/// - Memory image display: Affichage optimis√© depuis m√©moire
///
/// √âTAT ACTUEL:
/// - Display: Image m√©moire avec fit contain pour pr√©servation ratio
/// - Contr√¥le: Visibilit√© toggleable via provider
/// - Performance: Optimis√© pour grandes images
/// - Responsive: Adaptation automatique taille √©cran
///
/// HISTORIQUE R√âCENT:
/// - Optimisation affichage grandes images
/// - Am√©lioration contr√¥le visibilit√©
/// - Int√©gration state management avec Riverpod
/// - Responsive design pour toutes orientations
///
/// üîß POINTS D'ATTENTION:
/// - Memory usage: Surveiller usage m√©moire pour grandes images
/// - State sync: Maintenir coh√©rence avec √©tat principal jeu
/// - Performance: √âviter rebuilds inutiles
/// - UX: Transition fluide show/hide
///
/// üöÄ PROCHAINES √âTAPES:
/// - Ajouter animations transition show/hide
/// - Impl√©menter zoom/pan pour grandes images
/// - Optimiser rendu pour tr√®s hautes r√©solutions
/// - Ajouter gesture controls (pinch, double-tap)
///
/// üîó FICHIERS LI√âS:
/// - features/puzzle/domain/providers/game_providers.dart: √âtat image
/// - features/puzzle/presentation/screens/puzzle_game_screen.dart: Int√©gration
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê (Widget utilitaire)
/// üìÖ Derni√®re modification: 2024-12-20 15:35
/// </cursor>

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:luchy/features/puzzle/domain/providers/game_providers.dart';

final imagePreviewVisibilityProvider = StateProvider<bool>((ref) => true);

class ImagePreview extends ConsumerWidget {
  const ImagePreview({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final showPreview = ref.watch(imagePreviewVisibilityProvider);
    final imageState = ref.watch(imageProcessingProvider);

    if (!showPreview || imageState.fullImage == null) {
      return const SizedBox.shrink();
    }

    return Center(
      child: Image.memory(
        imageState.fullImage!,
        fit: BoxFit.contain,
      ),
    );
  }
}

// Extension pour contr√¥ler la visibilit√© de l'aper√ßu
extension ImagePreviewControl on WidgetRef {
  void showImagePreviewTemporarily(
      {Duration duration = const Duration(seconds: 3)}) {
    read(imagePreviewVisibilityProvider.notifier).state = true;
    Future.delayed(duration, () {
      read(imagePreviewVisibilityProvider.notifier).state = false;
    });
  }
}
