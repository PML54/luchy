/// <cursor>
/// LUCHY - AppBar sp√©cialis√©e pour les puzzles √©ducatifs
///
/// Widget d'AppBar d√©di√©e aux puzzles √©ducatifs avec contr√¥les sp√©cifiques :
/// bouton quitter, compteur de pi√®ces, et g√©n√©ration al√©atoire de quiz.
///
/// COMPOSANTS PRINCIPAUX:
/// - EducationalAppBar: AppBar principale pour mode √©ducatif
/// - Bouton quitter: Retour au mode puzzle normal
/// - Compteur pi√®ces: Affichage compact progression
/// - Bouton al√©atoire: G√©n√©ration nouveau quiz √©ducatif
///
/// √âTAT ACTUEL:
/// - Interface: Compacte et sp√©cialis√©e pour √©ducatif
/// - Contr√¥les: Quitter, compteur, g√©n√©ration al√©atoire
/// - Design: Material Design 3 coh√©rent avec app
/// - Fonctionnalit√©s: En cours d'impl√©mentation
///
/// HISTORIQUE R√âCENT:
/// - Simplification AppBar: suppression titre pour √©conomiser espace
/// - Correction compteur: affichage correspondances √©ducatives (8/10) vs pi√®ces
/// - Cr√©ation initiale pour r√©soudre d√©bordement boutons iPhone
/// - Documentation format <cursor>
///
/// üîß POINTS D'ATTENTION:
/// - Responsive: S'adapter aux diff√©rentes tailles √©cran
/// - State management: Utiliser Riverpod pour coh√©rence
/// - UX: Contr√¥les intuitifs pour mode √©ducatif
/// - Performance: √âviter rebuilds inutiles
///
/// üöÄ PROCHAINES √âTAPES:
/// - Impl√©menter g√©n√©ration al√©atoire presets
/// - Ajouter animations transitions
/// - Optimiser pour tr√®s petits √©crans
/// - Tests complets sur diff√©rents devices
///
/// üîó FICHIERS LI√âS:
/// - features/puzzle/domain/providers/game_providers.dart: √âtat du jeu
/// - core/utils/educational_image_generator.dart: G√©n√©ration images √©ducatives
/// - features/puzzle/presentation/screens/puzzle_game_screen.dart: √âcran principal
/// - features/puzzle/presentation/widgets/toolbar/custom_toolbar.dart: Toolbar normale
///
/// CRITICALIT√â: ‚≠ê‚≠ê‚≠ê‚≠ê (Interface √©ducative sp√©cialis√©e)
/// üìÖ Derni√®re modification: 2025-01-27 17:25
/// </cursor>

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:luchy/core/utils/educational_image_generator.dart';
import 'package:luchy/features/puzzle/domain/providers/game_providers.dart';
import 'package:luchy/features/puzzle/presentation/controllers/image_controller.dart';
import 'package:luchy/features/puzzle/presentation/widgets/dialogs/verification_results_dialog.dart';

/// AppBar sp√©cialis√©e pour les puzzles √©ducatifs
class EducationalAppBar extends ConsumerWidget implements PreferredSizeWidget {
  const EducationalAppBar({super.key});

  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final gameState = ref.watch(gameStateProvider);
    final totalQuestions =
        gameState.rows; // Nombre de lignes = nombre de questions

    return AppBar(
      backgroundColor: Colors.blue,
      elevation: 0,
      automaticallyImplyLeading: false,
      title: Row(
        children: [
          // Bouton quitter (retour mode normal)
          IconButton(
            icon: const Icon(Icons.arrow_back, color: Colors.white),
            tooltip: 'Quitter mode √©ducatif',
            onPressed: () => _quitEducationalMode(ref),
          ),

          // Ic√¥ne √©ducative (sans titre pour √©conomiser l'espace)
          const Icon(Icons.school, color: Colors.white, size: 20),

          const Spacer(), // Prend l'espace disponible

          // Bouton de v√©rification des r√©ponses
          Container(
            decoration: BoxDecoration(
              color: Colors.green.withOpacity(0.8),
              borderRadius: BorderRadius.circular(12),
            ),
            child: IconButton(
              icon: const Icon(Icons.check_circle, color: Colors.white),
              tooltip: 'V√©rifier les r√©ponses',
              onPressed: () => _verifyAnswers(context, ref, totalQuestions),
            ),
          ),

          const SizedBox(width: 8),

          // Bouton g√©n√©ration al√©atoire
          IconButton(
            icon: const Icon(Icons.shuffle, color: Colors.white),
            tooltip: 'Quiz al√©atoire',
            onPressed: () => _generateRandomEducationalQuiz(ref),
          ),
        ],
      ),
    );
  }

  /// V√©rifier les r√©ponses et afficher les r√©sultats
  Future<void> _verifyAnswers(
      BuildContext context, WidgetRef ref, int totalQuestions) async {
    try {
      // Compter les bonnes r√©ponses
      final correctAnswers = ref
          .read(gameStateProvider.notifier)
          .countCorrectEducationalCorrespondences();

      // R√©cup√©rer le temps √©coul√© depuis le d√©but du puzzle
      final elapsedTime = ref.read(gameStateProvider.notifier).getElapsedTime();

      // Afficher le dialog des r√©sultats
      final result = await showDialog<String>(
        context: context,
        barrierDismissible: false,
        builder: (context) => VerificationResultsDialog(
          correctAnswers: correctAnswers,
          totalQuestions: totalQuestions,
          elapsedTime: elapsedTime,
        ),
      );

      // G√©rer les actions du dialog
      if (result == 'restart') {
        await _generateRandomEducationalQuiz(ref);
      }
    } catch (e) {
      debugPrint('Erreur lors de la v√©rification: $e');
    }
  }

  /// Quitter le mode √©ducatif et revenir au mode puzzle normal
  Future<void> _quitEducationalMode(WidgetRef ref) async {
    try {
      // Passer en mode puzzle normal (type 1)
      await ref.read(gameSettingsProvider.notifier).setPuzzleType(1);

      // Charger une image al√©atoire normale
      await ref.read(imageControllerProvider.notifier).loadRandomImage();
    } catch (e) {
      debugPrint('Erreur lors de la sortie du mode √©ducatif: $e');
    }
  }

  /// G√©n√©rer al√©atoirement un nouveau quiz √©ducatif
  Future<void> _generateRandomEducationalQuiz(WidgetRef ref) async {
    try {
      // R√©cup√©rer tous les presets √©ducatifs disponibles
      final presets = EducationalImageGenerator.getAllPresets();
      if (presets.isEmpty) return;

      // S√©lectionner un preset al√©atoire
      final randomIndex =
          DateTime.now().millisecondsSinceEpoch % presets.length;
      final selectedPreset = presets[randomIndex];

      // R√©cup√©rer le type de puzzle actuel (√©ducatif ou classique)
      final currentSettings = ref.read(gameSettingsProvider);
      final applyEducationalShuffle = currentSettings.puzzleType == 2;

      // G√©n√©rer l'image √©ducative
      final result = await EducationalImageGenerator.generateFromPreset(
        selectedPreset,
        cellWidth: 600,
        cellHeight: 200,
        applyEducationalShuffle: applyEducationalShuffle,
      );

      // Charger l'image dans le jeu
      await ref.read(imageControllerProvider.notifier).loadEducationalImage(
            result.pngBytes,
            rows: result.rows,
            columns: result.columns,
            description: result.description,
            puzzleType: currentSettings.puzzleType,
            educationalMapping: result.originalMapping,
          );
    } catch (e) {
      debugPrint('Erreur lors de la g√©n√©ration du quiz al√©atoire: $e');
    }
  }
}
